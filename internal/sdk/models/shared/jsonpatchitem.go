// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Op - Operation to be performed.
type Op string

const (
	OpAdd    Op = "add"
	OpRemove Op = "remove"
	OpTest   Op = "test"
)

func (e Op) ToPointer() *Op {
	return &e
}
func (e *Op) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "add":
		fallthrough
	case "remove":
		fallthrough
	case "test":
		*e = Op(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Op: %v", v)
	}
}

type JSONPatchItem struct {
	// Operation to be performed.
	Op Op `json:"op"`
	// A JSON Pointer path indicating the part of the document to operate on.
	Path string `json:"path"`
	// The value to be used within the operations.
	Value any `json:"value"`
}

func (o *JSONPatchItem) GetOp() Op {
	if o == nil {
		return Op("")
	}
	return o.Op
}

func (o *JSONPatchItem) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *JSONPatchItem) GetValue() any {
	if o == nil {
		return nil
	}
	return o.Value
}
