// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

type InspectRule struct {
	// the type of the policy
	Type string `json:"type"`
	// a rule that affects the entire proxy
	ProxyRule *ProxyRule `json:"proxyRule,omitempty"`
	// a set of rules for the outbounds of this proxy. The field is not set when 'meshService.mode' on Mesh is set to 'Exclusive'.
	ToRules []Rule `json:"toRules,omitempty"`
	// a set of rules for the outbounds produced by real resources (i.e MeshService, MeshExternalService, MeshMultiZoneService).
	ToResourceRules []ResourceRule `json:"toResourceRules,omitempty"`
	// a set of rules for each inbound of this proxy
	FromRules []FromRule `json:"fromRules,omitempty"`
	// a set of rules for each inbound port of the proxy. When the policy descriptor has 'isFromAsRules' set to true, this field supersedes 'fromRules' and should be used instead.
	InboundRules []InboundRulesEntry `json:"inboundRules,omitempty"`
	// a set of warnings to show in policy matching
	Warnings []string `json:"warnings,omitempty"`
}

func (o *InspectRule) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *InspectRule) GetProxyRule() *ProxyRule {
	if o == nil {
		return nil
	}
	return o.ProxyRule
}

func (o *InspectRule) GetToRules() []Rule {
	if o == nil {
		return nil
	}
	return o.ToRules
}

func (o *InspectRule) GetToResourceRules() []ResourceRule {
	if o == nil {
		return nil
	}
	return o.ToResourceRules
}

func (o *InspectRule) GetFromRules() []FromRule {
	if o == nil {
		return nil
	}
	return o.FromRules
}

func (o *InspectRule) GetInboundRules() []InboundRulesEntry {
	if o == nil {
		return nil
	}
	return o.InboundRules
}

func (o *InspectRule) GetWarnings() []string {
	if o == nil {
		return nil
	}
	return o.Warnings
}
