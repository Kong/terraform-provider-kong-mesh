// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Scope string

const (
	ScopeGlobal Scope = "Global"
	ScopeMesh   Scope = "Mesh"
)

func (e Scope) ToPointer() *Scope {
	return &e
}
func (e *Scope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Global":
		fallthrough
	case "Mesh":
		*e = Scope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Scope: %v", v)
	}
}

// ResourceTypeDescription - Description of a resource type, this is useful for dynamically generated clients and the gui
type ResourceTypeDescription struct {
	// the name of the resource type
	Name     string `json:"name"`
	Scope    Scope  `json:"scope"`
	ReadOnly bool   `json:"readOnly"`
	// the path to use for accessing this resource. If scope is `Global` then it will be `/<path>` otherwise it will be `/meshes/<path>`
	Path                string `json:"path"`
	SingularDisplayName string `json:"singularDisplayName"`
	PluralDisplayName   string `json:"pluralDisplayName"`
	// description resources of this type should be included in federetion-with-policies export profile (especially useful for moving from non-federated to federated or migrating to a new global).
	IncludeInFederation bool `json:"includeInFederation"`
	// information about a policy
	Policy *PolicyDescription `json:"policy,omitempty"`
}

func (o *ResourceTypeDescription) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ResourceTypeDescription) GetScope() Scope {
	if o == nil {
		return Scope("")
	}
	return o.Scope
}

func (o *ResourceTypeDescription) GetReadOnly() bool {
	if o == nil {
		return false
	}
	return o.ReadOnly
}

func (o *ResourceTypeDescription) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *ResourceTypeDescription) GetSingularDisplayName() string {
	if o == nil {
		return ""
	}
	return o.SingularDisplayName
}

func (o *ResourceTypeDescription) GetPluralDisplayName() string {
	if o == nil {
		return ""
	}
	return o.PluralDisplayName
}

func (o *ResourceTypeDescription) GetIncludeInFederation() bool {
	if o == nil {
		return false
	}
	return o.IncludeInFederation
}

func (o *ResourceTypeDescription) GetPolicy() *PolicyDescription {
	if o == nil {
		return nil
	}
	return o.Policy
}
