// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/internal/utils"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/models/shared"
	"net/http"
)

type Include string

const (
	IncludeDiff Include = "diff"
)

func (e Include) ToPointer() *Include {
	return &e
}
func (e *Include) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "diff":
		*e = Include(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Include: %v", v)
	}
}

type GetDataplanesXdsConfigRequest struct {
	// The mesh of the DPP to get the diff for.
	Mesh string `pathParam:"style=simple,explode=false,name=mesh"`
	// The name of the DPP within the mesh to get the diff for.
	Name string `pathParam:"style=simple,explode=false,name=name"`
	// When computing XDS config the CP take into account policies with 'kuma.io/effect: shadow' label
	//
	Shadow *bool `default:"false" queryParam:"style=form,explode=true,name=shadow"`
	// An array of extra fields to include in the response. When `include=diff` the server computes a diff in JSONPatch format
	// between the current proxy XDS config and the config returned in the 'xds' field.
	//
	Include []Include `queryParam:"style=form,explode=true,name=include"`
}

func (g GetDataplanesXdsConfigRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDataplanesXdsConfigRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetDataplanesXdsConfigRequest) GetMesh() string {
	if o == nil {
		return ""
	}
	return o.Mesh
}

func (o *GetDataplanesXdsConfigRequest) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDataplanesXdsConfigRequest) GetShadow() *bool {
	if o == nil {
		return nil
	}
	return o.Shadow
}

func (o *GetDataplanesXdsConfigRequest) GetInclude() []Include {
	if o == nil {
		return nil
	}
	return o.Include
}

type GetDataplanesXdsConfigResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successfully retrieved proxy XDS config.
	DataplaneXDSConfig *shared.DataplaneXDSConfig
	// Bad Request
	BadRequestError *shared.BadRequestError
	// Internal
	InternalError *shared.InternalError
}

func (o *GetDataplanesXdsConfigResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GetDataplanesXdsConfigResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GetDataplanesXdsConfigResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *GetDataplanesXdsConfigResponse) GetDataplaneXDSConfig() *shared.DataplaneXDSConfig {
	if o == nil {
		return nil
	}
	return o.DataplaneXDSConfig
}

func (o *GetDataplanesXdsConfigResponse) GetBadRequestError() *shared.BadRequestError {
	if o == nil {
		return nil
	}
	return o.BadRequestError
}

func (o *GetDataplanesXdsConfigResponse) GetInternalError() *shared.InternalError {
	if o == nil {
		return nil
	}
	return o.InternalError
}
