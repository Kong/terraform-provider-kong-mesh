// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-kong-mesh/internal/provider/types"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/models/shared"
)

func (r *DataplaneOverviewDataSourceModel) ToOperationsGetDataplaneOverviewRequest(ctx context.Context) (*operations.GetDataplaneOverviewRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.GetDataplaneOverviewRequest{
		Mesh: mesh,
		Name: name,
	}

	return &out, diags
}

func (r *DataplaneOverviewDataSourceModel) RefreshFromSharedDataplaneOverviewWithMeta(ctx context.Context, resp *shared.DataplaneOverviewWithMeta) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Dataplane == nil {
			r.Dataplane = nil
		} else {
			r.Dataplane = &tfTypes.Dataplane{}
			if resp.Dataplane.Metrics == nil {
				r.Dataplane.Metrics = nil
			} else {
				r.Dataplane.Metrics = &tfTypes.Metrics{}
				if resp.Dataplane.Metrics.Conf != nil {
					r.Dataplane.Metrics.Conf = &tfTypes.DataplaneItemConf{}
					if resp.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig != nil {
						r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig = &tfTypes.PrometheusMetricsBackendConfig{}
						r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Aggregate = []tfTypes.Aggregate{}
						if len(r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Aggregate) > len(resp.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.Aggregate) {
							r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Aggregate = r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Aggregate[:len(resp.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.Aggregate)]
						}
						for aggregateCount, aggregateItem := range resp.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.Aggregate {
							var aggregate tfTypes.Aggregate
							aggregate.Address = types.StringPointerValue(aggregateItem.Address)
							aggregate.Enabled = types.BoolPointerValue(aggregateItem.Enabled)
							aggregate.Name = types.StringPointerValue(aggregateItem.Name)
							aggregate.Path = types.StringPointerValue(aggregateItem.Path)
							aggregate.Port = types.Int64PointerValue(aggregateItem.Port)
							if aggregateCount+1 > len(r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Aggregate) {
								r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Aggregate = append(r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Aggregate, aggregate)
							} else {
								r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Aggregate[aggregateCount].Address = aggregate.Address
								r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Aggregate[aggregateCount].Enabled = aggregate.Enabled
								r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Aggregate[aggregateCount].Name = aggregate.Name
								r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Aggregate[aggregateCount].Path = aggregate.Path
								r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Aggregate[aggregateCount].Port = aggregate.Port
							}
						}
						if resp.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.Envoy == nil {
							r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Envoy = nil
						} else {
							r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Envoy = &tfTypes.ConfEnvoy{}
							r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Envoy.FilterRegex = types.StringPointerValue(resp.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.Envoy.FilterRegex)
							r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Envoy.UsedOnly = types.BoolPointerValue(resp.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.Envoy.UsedOnly)
						}
						r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Path = types.StringPointerValue(resp.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.Path)
						r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Port = types.Int64PointerValue(resp.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.Port)
						r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.SkipMTLS = types.BoolPointerValue(resp.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.SkipMTLS)
						if len(resp.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.Tags) > 0 {
							r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Tags = make(map[string]types.String, len(resp.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.Tags))
							for key, value := range resp.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.Tags {
								r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Tags[key] = types.StringValue(value)
							}
						}
						if resp.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.TLS == nil {
							r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.TLS = nil
						} else {
							r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.TLS = &tfTypes.ConfTLS{}
							if resp.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.TLS.Mode != nil {
								r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.TLS.Mode = &tfTypes.ConfMode{}
								if resp.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.TLS.Mode.Str != nil {
									r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Str = types.StringPointerValue(resp.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.TLS.Mode.Str)
								}
								if resp.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.TLS.Mode.Integer != nil {
									r.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Integer = types.Int64PointerValue(resp.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.TLS.Mode.Integer)
								}
							}
						}
					}
				}
				r.Dataplane.Metrics.Name = types.StringPointerValue(resp.Dataplane.Metrics.Name)
				r.Dataplane.Metrics.Type = types.StringPointerValue(resp.Dataplane.Metrics.Type)
			}
			if resp.Dataplane.Networking == nil {
				r.Dataplane.Networking = nil
			} else {
				r.Dataplane.Networking = &tfTypes.Networking{}
				r.Dataplane.Networking.Address = types.StringPointerValue(resp.Dataplane.Networking.Address)
				if resp.Dataplane.Networking.Admin == nil {
					r.Dataplane.Networking.Admin = nil
				} else {
					r.Dataplane.Networking.Admin = &tfTypes.Admin{}
					r.Dataplane.Networking.Admin.Port = types.Int64PointerValue(resp.Dataplane.Networking.Admin.Port)
				}
				r.Dataplane.Networking.AdvertisedAddress = types.StringPointerValue(resp.Dataplane.Networking.AdvertisedAddress)
				if resp.Dataplane.Networking.Gateway == nil {
					r.Dataplane.Networking.Gateway = nil
				} else {
					r.Dataplane.Networking.Gateway = &tfTypes.Gateway{}
					if len(resp.Dataplane.Networking.Gateway.Tags) > 0 {
						r.Dataplane.Networking.Gateway.Tags = make(map[string]types.String, len(resp.Dataplane.Networking.Gateway.Tags))
						for key1, value1 := range resp.Dataplane.Networking.Gateway.Tags {
							r.Dataplane.Networking.Gateway.Tags[key1] = types.StringValue(value1)
						}
					}
					if resp.Dataplane.Networking.Gateway.Type != nil {
						r.Dataplane.Networking.Gateway.Type = &tfTypes.ConfMode{}
						if resp.Dataplane.Networking.Gateway.Type.Str != nil {
							r.Dataplane.Networking.Gateway.Type.Str = types.StringPointerValue(resp.Dataplane.Networking.Gateway.Type.Str)
						}
						if resp.Dataplane.Networking.Gateway.Type.Integer != nil {
							r.Dataplane.Networking.Gateway.Type.Integer = types.Int64PointerValue(resp.Dataplane.Networking.Gateway.Type.Integer)
						}
					}
				}
				r.Dataplane.Networking.Inbound = []tfTypes.DataplaneItemInbound{}
				if len(r.Dataplane.Networking.Inbound) > len(resp.Dataplane.Networking.Inbound) {
					r.Dataplane.Networking.Inbound = r.Dataplane.Networking.Inbound[:len(resp.Dataplane.Networking.Inbound)]
				}
				for inboundCount, inboundItem := range resp.Dataplane.Networking.Inbound {
					var inbound tfTypes.DataplaneItemInbound
					inbound.Address = types.StringPointerValue(inboundItem.Address)
					if inboundItem.Health == nil {
						inbound.Health = nil
					} else {
						inbound.Health = &tfTypes.Health{}
						inbound.Health.Ready = types.BoolPointerValue(inboundItem.Health.Ready)
					}
					inbound.Name = types.StringPointerValue(inboundItem.Name)
					inbound.Port = types.Int64PointerValue(inboundItem.Port)
					inbound.ServiceAddress = types.StringPointerValue(inboundItem.ServiceAddress)
					inbound.ServicePort = types.Int64PointerValue(inboundItem.ServicePort)
					if inboundItem.ServiceProbe == nil {
						inbound.ServiceProbe = nil
					} else {
						inbound.ServiceProbe = &tfTypes.ServiceProbe{}
						inbound.ServiceProbe.HealthyThreshold = types.Int64PointerValue(inboundItem.ServiceProbe.HealthyThreshold)
						if inboundItem.ServiceProbe.Interval == nil {
							inbound.ServiceProbe.Interval = nil
						} else {
							inbound.ServiceProbe.Interval = &tfTypes.Interval{}
							inbound.ServiceProbe.Interval.Nanos = types.Int64PointerValue(inboundItem.ServiceProbe.Interval.Nanos)
							inbound.ServiceProbe.Interval.Seconds = types.Int64PointerValue(inboundItem.ServiceProbe.Interval.Seconds)
						}
						if inboundItem.ServiceProbe.TCP == nil {
							inbound.ServiceProbe.TCP = nil
						} else {
							inbound.ServiceProbe.TCP = &tfTypes.DataplaneItemTCP{}
						}
						if inboundItem.ServiceProbe.Timeout == nil {
							inbound.ServiceProbe.Timeout = nil
						} else {
							inbound.ServiceProbe.Timeout = &tfTypes.Interval{}
							inbound.ServiceProbe.Timeout.Nanos = types.Int64PointerValue(inboundItem.ServiceProbe.Timeout.Nanos)
							inbound.ServiceProbe.Timeout.Seconds = types.Int64PointerValue(inboundItem.ServiceProbe.Timeout.Seconds)
						}
						inbound.ServiceProbe.UnhealthyThreshold = types.Int64PointerValue(inboundItem.ServiceProbe.UnhealthyThreshold)
					}
					if inboundItem.State != nil {
						inbound.State = &tfTypes.ConfMode{}
						if inboundItem.State.Str != nil {
							inbound.State.Str = types.StringPointerValue(inboundItem.State.Str)
						}
						if inboundItem.State.Integer != nil {
							inbound.State.Integer = types.Int64PointerValue(inboundItem.State.Integer)
						}
					}
					if len(inboundItem.Tags) > 0 {
						inbound.Tags = make(map[string]types.String, len(inboundItem.Tags))
						for key2, value2 := range inboundItem.Tags {
							inbound.Tags[key2] = types.StringValue(value2)
						}
					}
					if inboundCount+1 > len(r.Dataplane.Networking.Inbound) {
						r.Dataplane.Networking.Inbound = append(r.Dataplane.Networking.Inbound, inbound)
					} else {
						r.Dataplane.Networking.Inbound[inboundCount].Address = inbound.Address
						r.Dataplane.Networking.Inbound[inboundCount].Health = inbound.Health
						r.Dataplane.Networking.Inbound[inboundCount].Name = inbound.Name
						r.Dataplane.Networking.Inbound[inboundCount].Port = inbound.Port
						r.Dataplane.Networking.Inbound[inboundCount].ServiceAddress = inbound.ServiceAddress
						r.Dataplane.Networking.Inbound[inboundCount].ServicePort = inbound.ServicePort
						r.Dataplane.Networking.Inbound[inboundCount].ServiceProbe = inbound.ServiceProbe
						r.Dataplane.Networking.Inbound[inboundCount].State = inbound.State
						r.Dataplane.Networking.Inbound[inboundCount].Tags = inbound.Tags
					}
				}
				r.Dataplane.Networking.Outbound = []tfTypes.Outbound{}
				if len(r.Dataplane.Networking.Outbound) > len(resp.Dataplane.Networking.Outbound) {
					r.Dataplane.Networking.Outbound = r.Dataplane.Networking.Outbound[:len(resp.Dataplane.Networking.Outbound)]
				}
				for outboundCount, outboundItem := range resp.Dataplane.Networking.Outbound {
					var outbound tfTypes.Outbound
					outbound.Address = types.StringPointerValue(outboundItem.Address)
					if outboundItem.BackendRef == nil {
						outbound.BackendRef = nil
					} else {
						outbound.BackendRef = &tfTypes.BackendRef{}
						outbound.BackendRef.Kind = types.StringPointerValue(outboundItem.BackendRef.Kind)
						if len(outboundItem.BackendRef.Labels) > 0 {
							outbound.BackendRef.Labels = make(map[string]types.String, len(outboundItem.BackendRef.Labels))
							for key3, value3 := range outboundItem.BackendRef.Labels {
								outbound.BackendRef.Labels[key3] = types.StringValue(value3)
							}
						}
						outbound.BackendRef.Name = types.StringPointerValue(outboundItem.BackendRef.Name)
						outbound.BackendRef.Port = types.Int64PointerValue(outboundItem.BackendRef.Port)
					}
					outbound.Port = types.Int64PointerValue(outboundItem.Port)
					if len(outboundItem.Tags) > 0 {
						outbound.Tags = make(map[string]types.String, len(outboundItem.Tags))
						for key4, value4 := range outboundItem.Tags {
							outbound.Tags[key4] = types.StringValue(value4)
						}
					}
					if outboundCount+1 > len(r.Dataplane.Networking.Outbound) {
						r.Dataplane.Networking.Outbound = append(r.Dataplane.Networking.Outbound, outbound)
					} else {
						r.Dataplane.Networking.Outbound[outboundCount].Address = outbound.Address
						r.Dataplane.Networking.Outbound[outboundCount].BackendRef = outbound.BackendRef
						r.Dataplane.Networking.Outbound[outboundCount].Port = outbound.Port
						r.Dataplane.Networking.Outbound[outboundCount].Tags = outbound.Tags
					}
				}
				if resp.Dataplane.Networking.TransparentProxying == nil {
					r.Dataplane.Networking.TransparentProxying = nil
				} else {
					r.Dataplane.Networking.TransparentProxying = &tfTypes.TransparentProxying{}
					r.Dataplane.Networking.TransparentProxying.DirectAccessServices = make([]types.String, 0, len(resp.Dataplane.Networking.TransparentProxying.DirectAccessServices))
					for _, v := range resp.Dataplane.Networking.TransparentProxying.DirectAccessServices {
						r.Dataplane.Networking.TransparentProxying.DirectAccessServices = append(r.Dataplane.Networking.TransparentProxying.DirectAccessServices, types.StringValue(v))
					}
					if resp.Dataplane.Networking.TransparentProxying.IPFamilyMode != nil {
						r.Dataplane.Networking.TransparentProxying.IPFamilyMode = &tfTypes.ConfMode{}
						if resp.Dataplane.Networking.TransparentProxying.IPFamilyMode.Str != nil {
							r.Dataplane.Networking.TransparentProxying.IPFamilyMode.Str = types.StringPointerValue(resp.Dataplane.Networking.TransparentProxying.IPFamilyMode.Str)
						}
						if resp.Dataplane.Networking.TransparentProxying.IPFamilyMode.Integer != nil {
							r.Dataplane.Networking.TransparentProxying.IPFamilyMode.Integer = types.Int64PointerValue(resp.Dataplane.Networking.TransparentProxying.IPFamilyMode.Integer)
						}
					}
					if resp.Dataplane.Networking.TransparentProxying.ReachableBackends == nil {
						r.Dataplane.Networking.TransparentProxying.ReachableBackends = nil
					} else {
						r.Dataplane.Networking.TransparentProxying.ReachableBackends = &tfTypes.ReachableBackends{}
						r.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs = []tfTypes.Refs{}
						if len(r.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs) > len(resp.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs) {
							r.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs = r.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs[:len(resp.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs)]
						}
						for refsCount, refsItem := range resp.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs {
							var refs tfTypes.Refs
							refs.Kind = types.StringPointerValue(refsItem.Kind)
							if len(refsItem.Labels) > 0 {
								refs.Labels = make(map[string]types.String, len(refsItem.Labels))
								for key5, value5 := range refsItem.Labels {
									refs.Labels[key5] = types.StringValue(value5)
								}
							}
							refs.Name = types.StringPointerValue(refsItem.Name)
							refs.Namespace = types.StringPointerValue(refsItem.Namespace)
							refs.Port = types.Int64PointerValue(refsItem.Port)
							if refsCount+1 > len(r.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs) {
								r.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs = append(r.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs, refs)
							} else {
								r.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs[refsCount].Kind = refs.Kind
								r.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs[refsCount].Labels = refs.Labels
								r.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs[refsCount].Name = refs.Name
								r.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs[refsCount].Namespace = refs.Namespace
								r.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs[refsCount].Port = refs.Port
							}
						}
					}
					r.Dataplane.Networking.TransparentProxying.ReachableServices = make([]types.String, 0, len(resp.Dataplane.Networking.TransparentProxying.ReachableServices))
					for _, v := range resp.Dataplane.Networking.TransparentProxying.ReachableServices {
						r.Dataplane.Networking.TransparentProxying.ReachableServices = append(r.Dataplane.Networking.TransparentProxying.ReachableServices, types.StringValue(v))
					}
					r.Dataplane.Networking.TransparentProxying.RedirectPortInbound = types.Int64PointerValue(resp.Dataplane.Networking.TransparentProxying.RedirectPortInbound)
					r.Dataplane.Networking.TransparentProxying.RedirectPortOutbound = types.Int64PointerValue(resp.Dataplane.Networking.TransparentProxying.RedirectPortOutbound)
				}
			}
			if resp.Dataplane.Probes == nil {
				r.Dataplane.Probes = nil
			} else {
				r.Dataplane.Probes = &tfTypes.Probes{}
				r.Dataplane.Probes.Endpoints = []tfTypes.Endpoints{}
				if len(r.Dataplane.Probes.Endpoints) > len(resp.Dataplane.Probes.Endpoints) {
					r.Dataplane.Probes.Endpoints = r.Dataplane.Probes.Endpoints[:len(resp.Dataplane.Probes.Endpoints)]
				}
				for endpointsCount, endpointsItem := range resp.Dataplane.Probes.Endpoints {
					var endpoints tfTypes.Endpoints
					endpoints.InboundPath = types.StringPointerValue(endpointsItem.InboundPath)
					endpoints.InboundPort = types.Int64PointerValue(endpointsItem.InboundPort)
					endpoints.Path = types.StringPointerValue(endpointsItem.Path)
					if endpointsCount+1 > len(r.Dataplane.Probes.Endpoints) {
						r.Dataplane.Probes.Endpoints = append(r.Dataplane.Probes.Endpoints, endpoints)
					} else {
						r.Dataplane.Probes.Endpoints[endpointsCount].InboundPath = endpoints.InboundPath
						r.Dataplane.Probes.Endpoints[endpointsCount].InboundPort = endpoints.InboundPort
						r.Dataplane.Probes.Endpoints[endpointsCount].Path = endpoints.Path
					}
				}
				r.Dataplane.Probes.Port = types.Int64PointerValue(resp.Dataplane.Probes.Port)
			}
		}
		if resp.DataplaneInsight == nil {
			r.DataplaneInsight = nil
		} else {
			r.DataplaneInsight = &tfTypes.DataplaneInsight{}
			if resp.DataplaneInsight.Metadata == nil {
				r.DataplaneInsight.Metadata = nil
			} else {
				r.DataplaneInsight.Metadata = &tfTypes.DataplaneItemTCP{}
			}
			if resp.DataplaneInsight.MTLS == nil {
				r.DataplaneInsight.MTLS = nil
			} else {
				r.DataplaneInsight.MTLS = &tfTypes.DataplaneOverviewWithMetaMTLS{}
				if resp.DataplaneInsight.MTLS.CertificateExpirationTime == nil {
					r.DataplaneInsight.MTLS.CertificateExpirationTime = nil
				} else {
					r.DataplaneInsight.MTLS.CertificateExpirationTime = &tfTypes.Interval{}
					r.DataplaneInsight.MTLS.CertificateExpirationTime.Nanos = types.Int64PointerValue(resp.DataplaneInsight.MTLS.CertificateExpirationTime.Nanos)
					r.DataplaneInsight.MTLS.CertificateExpirationTime.Seconds = types.Int64PointerValue(resp.DataplaneInsight.MTLS.CertificateExpirationTime.Seconds)
				}
				r.DataplaneInsight.MTLS.CertificateRegenerations = types.Int64PointerValue(resp.DataplaneInsight.MTLS.CertificateRegenerations)
				r.DataplaneInsight.MTLS.IssuedBackend = types.StringPointerValue(resp.DataplaneInsight.MTLS.IssuedBackend)
				if resp.DataplaneInsight.MTLS.LastCertificateRegeneration == nil {
					r.DataplaneInsight.MTLS.LastCertificateRegeneration = nil
				} else {
					r.DataplaneInsight.MTLS.LastCertificateRegeneration = &tfTypes.Interval{}
					r.DataplaneInsight.MTLS.LastCertificateRegeneration.Nanos = types.Int64PointerValue(resp.DataplaneInsight.MTLS.LastCertificateRegeneration.Nanos)
					r.DataplaneInsight.MTLS.LastCertificateRegeneration.Seconds = types.Int64PointerValue(resp.DataplaneInsight.MTLS.LastCertificateRegeneration.Seconds)
				}
				r.DataplaneInsight.MTLS.SupportedBackends = make([]types.String, 0, len(resp.DataplaneInsight.MTLS.SupportedBackends))
				for _, v := range resp.DataplaneInsight.MTLS.SupportedBackends {
					r.DataplaneInsight.MTLS.SupportedBackends = append(r.DataplaneInsight.MTLS.SupportedBackends, types.StringValue(v))
				}
			}
			r.DataplaneInsight.Subscriptions = []tfTypes.Subscriptions{}
			if len(r.DataplaneInsight.Subscriptions) > len(resp.DataplaneInsight.Subscriptions) {
				r.DataplaneInsight.Subscriptions = r.DataplaneInsight.Subscriptions[:len(resp.DataplaneInsight.Subscriptions)]
			}
			for subscriptionsCount, subscriptionsItem := range resp.DataplaneInsight.Subscriptions {
				var subscriptions tfTypes.Subscriptions
				if subscriptionsItem.ConnectTime == nil {
					subscriptions.ConnectTime = nil
				} else {
					subscriptions.ConnectTime = &tfTypes.Interval{}
					subscriptions.ConnectTime.Nanos = types.Int64PointerValue(subscriptionsItem.ConnectTime.Nanos)
					subscriptions.ConnectTime.Seconds = types.Int64PointerValue(subscriptionsItem.ConnectTime.Seconds)
				}
				subscriptions.ControlPlaneInstanceID = types.StringPointerValue(subscriptionsItem.ControlPlaneInstanceID)
				if subscriptionsItem.DisconnectTime == nil {
					subscriptions.DisconnectTime = nil
				} else {
					subscriptions.DisconnectTime = &tfTypes.Interval{}
					subscriptions.DisconnectTime.Nanos = types.Int64PointerValue(subscriptionsItem.DisconnectTime.Nanos)
					subscriptions.DisconnectTime.Seconds = types.Int64PointerValue(subscriptionsItem.DisconnectTime.Seconds)
				}
				subscriptions.Generation = types.Int64PointerValue(subscriptionsItem.Generation)
				subscriptions.ID = types.StringPointerValue(subscriptionsItem.ID)
				if subscriptionsItem.Status == nil {
					subscriptions.Status = nil
				} else {
					subscriptions.Status = &tfTypes.DataplaneOverviewWithMetaStatus{}
					if subscriptionsItem.Status.Cds == nil {
						subscriptions.Status.Cds = nil
					} else {
						subscriptions.Status.Cds = &tfTypes.Cds{}
						subscriptions.Status.Cds.ResponsesAcknowledged = types.Int64PointerValue(subscriptionsItem.Status.Cds.ResponsesAcknowledged)
						subscriptions.Status.Cds.ResponsesRejected = types.Int64PointerValue(subscriptionsItem.Status.Cds.ResponsesRejected)
						subscriptions.Status.Cds.ResponsesSent = types.Int64PointerValue(subscriptionsItem.Status.Cds.ResponsesSent)
					}
					if subscriptionsItem.Status.Eds == nil {
						subscriptions.Status.Eds = nil
					} else {
						subscriptions.Status.Eds = &tfTypes.Cds{}
						subscriptions.Status.Eds.ResponsesAcknowledged = types.Int64PointerValue(subscriptionsItem.Status.Eds.ResponsesAcknowledged)
						subscriptions.Status.Eds.ResponsesRejected = types.Int64PointerValue(subscriptionsItem.Status.Eds.ResponsesRejected)
						subscriptions.Status.Eds.ResponsesSent = types.Int64PointerValue(subscriptionsItem.Status.Eds.ResponsesSent)
					}
					if subscriptionsItem.Status.LastUpdateTime == nil {
						subscriptions.Status.LastUpdateTime = nil
					} else {
						subscriptions.Status.LastUpdateTime = &tfTypes.Interval{}
						subscriptions.Status.LastUpdateTime.Nanos = types.Int64PointerValue(subscriptionsItem.Status.LastUpdateTime.Nanos)
						subscriptions.Status.LastUpdateTime.Seconds = types.Int64PointerValue(subscriptionsItem.Status.LastUpdateTime.Seconds)
					}
					if subscriptionsItem.Status.Lds == nil {
						subscriptions.Status.Lds = nil
					} else {
						subscriptions.Status.Lds = &tfTypes.Cds{}
						subscriptions.Status.Lds.ResponsesAcknowledged = types.Int64PointerValue(subscriptionsItem.Status.Lds.ResponsesAcknowledged)
						subscriptions.Status.Lds.ResponsesRejected = types.Int64PointerValue(subscriptionsItem.Status.Lds.ResponsesRejected)
						subscriptions.Status.Lds.ResponsesSent = types.Int64PointerValue(subscriptionsItem.Status.Lds.ResponsesSent)
					}
					if subscriptionsItem.Status.Rds == nil {
						subscriptions.Status.Rds = nil
					} else {
						subscriptions.Status.Rds = &tfTypes.Cds{}
						subscriptions.Status.Rds.ResponsesAcknowledged = types.Int64PointerValue(subscriptionsItem.Status.Rds.ResponsesAcknowledged)
						subscriptions.Status.Rds.ResponsesRejected = types.Int64PointerValue(subscriptionsItem.Status.Rds.ResponsesRejected)
						subscriptions.Status.Rds.ResponsesSent = types.Int64PointerValue(subscriptionsItem.Status.Rds.ResponsesSent)
					}
					if subscriptionsItem.Status.Total == nil {
						subscriptions.Status.Total = nil
					} else {
						subscriptions.Status.Total = &tfTypes.Cds{}
						subscriptions.Status.Total.ResponsesAcknowledged = types.Int64PointerValue(subscriptionsItem.Status.Total.ResponsesAcknowledged)
						subscriptions.Status.Total.ResponsesRejected = types.Int64PointerValue(subscriptionsItem.Status.Total.ResponsesRejected)
						subscriptions.Status.Total.ResponsesSent = types.Int64PointerValue(subscriptionsItem.Status.Total.ResponsesSent)
					}
				}
				if subscriptionsItem.Version == nil {
					subscriptions.Version = nil
				} else {
					subscriptions.Version = &tfTypes.Version{}
					if len(subscriptionsItem.Version.Dependencies) > 0 {
						subscriptions.Version.Dependencies = make(map[string]types.String, len(subscriptionsItem.Version.Dependencies))
						for key6, value6 := range subscriptionsItem.Version.Dependencies {
							subscriptions.Version.Dependencies[key6] = types.StringValue(value6)
						}
					}
					if subscriptionsItem.Version.Envoy == nil {
						subscriptions.Version.Envoy = nil
					} else {
						subscriptions.Version.Envoy = &tfTypes.Envoy{}
						subscriptions.Version.Envoy.Build = types.StringPointerValue(subscriptionsItem.Version.Envoy.Build)
						subscriptions.Version.Envoy.KumaDpCompatible = types.BoolPointerValue(subscriptionsItem.Version.Envoy.KumaDpCompatible)
						subscriptions.Version.Envoy.Version = types.StringPointerValue(subscriptionsItem.Version.Envoy.Version)
					}
					if subscriptionsItem.Version.KumaDp == nil {
						subscriptions.Version.KumaDp = nil
					} else {
						subscriptions.Version.KumaDp = &tfTypes.KumaDp{}
						subscriptions.Version.KumaDp.BuildDate = types.StringPointerValue(subscriptionsItem.Version.KumaDp.BuildDate)
						subscriptions.Version.KumaDp.GitCommit = types.StringPointerValue(subscriptionsItem.Version.KumaDp.GitCommit)
						subscriptions.Version.KumaDp.GitTag = types.StringPointerValue(subscriptionsItem.Version.KumaDp.GitTag)
						subscriptions.Version.KumaDp.KumaCpCompatible = types.BoolPointerValue(subscriptionsItem.Version.KumaDp.KumaCpCompatible)
						subscriptions.Version.KumaDp.Version = types.StringPointerValue(subscriptionsItem.Version.KumaDp.Version)
					}
				}
				if subscriptionsCount+1 > len(r.DataplaneInsight.Subscriptions) {
					r.DataplaneInsight.Subscriptions = append(r.DataplaneInsight.Subscriptions, subscriptions)
				} else {
					r.DataplaneInsight.Subscriptions[subscriptionsCount].ConnectTime = subscriptions.ConnectTime
					r.DataplaneInsight.Subscriptions[subscriptionsCount].ControlPlaneInstanceID = subscriptions.ControlPlaneInstanceID
					r.DataplaneInsight.Subscriptions[subscriptionsCount].DisconnectTime = subscriptions.DisconnectTime
					r.DataplaneInsight.Subscriptions[subscriptionsCount].Generation = subscriptions.Generation
					r.DataplaneInsight.Subscriptions[subscriptionsCount].ID = subscriptions.ID
					r.DataplaneInsight.Subscriptions[subscriptionsCount].Status = subscriptions.Status
					r.DataplaneInsight.Subscriptions[subscriptionsCount].Version = subscriptions.Version
				}
			}
		}
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key7, value7 := range resp.Labels {
				r.Labels[key7] = types.StringValue(value7)
			}
		}
		r.Mesh = types.StringValue(resp.Mesh)
		r.Name = types.StringValue(resp.Name)
		r.Type = types.StringValue(resp.Type)
	}

	return diags
}
