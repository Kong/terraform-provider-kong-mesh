// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/models/shared"
	"net/http"
	"os"
)

var _ provider.Provider = (*KongMeshProvider)(nil)
var _ provider.ProviderWithEphemeralResources = (*KongMeshProvider)(nil)

type KongMeshProvider struct {
	// version is set to the provider version on release, "dev" when the
	// provider is built and ran locally, and "test" when running acceptance
	// testing.
	version string
}

// KongMeshProviderModel describes the provider data model.
type KongMeshProviderModel struct {
	BearerAuth types.String `tfsdk:"bearer_auth"`
	Password   types.String `tfsdk:"password"`
	ServerURL  types.String `tfsdk:"server_url"`
	Username   types.String `tfsdk:"username"`
}

func (p *KongMeshProvider) Metadata(ctx context.Context, req provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = "kong-mesh"
	resp.Version = p.version
}

func (p *KongMeshProvider) Schema(ctx context.Context, req provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"bearer_auth": schema.StringAttribute{
				Optional:  true,
				Sensitive: true,
			},
			"password": schema.StringAttribute{
				Optional:  true,
				Sensitive: true,
			},
			"server_url": schema.StringAttribute{
				Description: `Server URL`,
				Required:    true,
			},
			"username": schema.StringAttribute{
				Optional:  true,
				Sensitive: true,
			},
		},
		MarkdownDescription: `Kong Mesh: This is a BETA Mesh specification. Endpoints in this specification may change with zero notice`,
	}
}

func (p *KongMeshProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	var data KongMeshProviderModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	ServerURL := data.ServerURL.ValueString()

	if ServerURL == "" && len(os.Getenv("SERVER_URL")) > 0 {
		ServerURL = os.Getenv("SERVER_URL")
	}
	if ServerURL == "" {
		resp.Diagnostics.AddError("server_url is required", "The server_url attribute must be provided in the provider configuration.")
		return
	}

	security := shared.Security{}

	basicAuth := &shared.SchemeBasicAuth{}

	if !data.Username.IsUnknown() {
		basicAuth.Username = data.Username.ValueString()
	}

	if !data.Password.IsUnknown() {
		basicAuth.Password = data.Password.ValueString()
	}

	if basicAuth.Username != "" || basicAuth.Password != "" {
		security.BasicAuth = basicAuth
	}

	if !data.BearerAuth.IsUnknown() {
		security.BearerAuth = data.BearerAuth.ValueStringPointer()
	}

	providerHTTPTransportOpts := ProviderHTTPTransportOpts{
		SetHeaders: make(map[string]string),
		Transport:  http.DefaultTransport,
	}

	httpClient := http.DefaultClient
	httpClient.Transport = NewProviderHTTPTransport(providerHTTPTransportOpts)

	opts := []sdk.SDKOption{
		sdk.WithSecurity(security),
		sdk.WithClient(httpClient),
	}
	client := sdk.New(ServerURL, opts...)

	resp.DataSourceData = client
	resp.EphemeralResourceData = client
	resp.ResourceData = client
}

func (p *KongMeshProvider) Resources(ctx context.Context) []func() resource.Resource {
	return []func() resource.Resource{
		NewMeshResource,
		NewMeshAccessLogResource,
		NewMeshCircuitBreakerResource,
		NewMeshExternalServiceResource,
		NewMeshFaultInjectionResource,
		NewMeshGatewayResource,
		NewMeshGlobalRateLimitResource,
		NewMeshHealthCheckResource,
		NewMeshHostnameGeneratorResource,
		NewMeshHTTPRouteResource,
		NewMeshLoadBalancingStrategyResource,
		NewMeshMetricResource,
		NewMeshMultiZoneServiceResource,
		NewMeshOPAResource,
		NewMeshPassthroughResource,
		NewMeshProxyPatchResource,
		NewMeshRateLimitResource,
		NewMeshRetryResource,
		NewMeshServiceResource,
		NewMeshTCPRouteResource,
		NewMeshTimeoutResource,
		NewMeshTLSResource,
		NewMeshTraceResource,
		NewMeshTrafficPermissionResource,
	}
}

func (p *KongMeshProvider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return []func() datasource.DataSource{
		NewHostnameGeneratorListDataSource,
		NewMeshDataSource,
		NewMeshAccessLogDataSource,
		NewMeshAccessLogListDataSource,
		NewMeshCircuitBreakerDataSource,
		NewMeshCircuitBreakerListDataSource,
		NewMeshExternalServiceDataSource,
		NewMeshExternalServiceListDataSource,
		NewMeshFaultInjectionDataSource,
		NewMeshFaultInjectionListDataSource,
		NewMeshGatewayDataSource,
		NewMeshGatewayListDataSource,
		NewMeshGlobalRateLimitDataSource,
		NewMeshGlobalRateLimitListDataSource,
		NewMeshHealthCheckDataSource,
		NewMeshHealthCheckListDataSource,
		NewMeshHostnameGeneratorDataSource,
		NewMeshHTTPRouteDataSource,
		NewMeshHTTPRouteListDataSource,
		NewMeshListDataSource,
		NewMeshLoadBalancingStrategyDataSource,
		NewMeshLoadBalancingStrategyListDataSource,
		NewMeshMetricDataSource,
		NewMeshMetricListDataSource,
		NewMeshMultiZoneServiceDataSource,
		NewMeshMultiZoneServiceListDataSource,
		NewMeshOPADataSource,
		NewMeshOPAListDataSource,
		NewMeshPassthroughDataSource,
		NewMeshPassthroughListDataSource,
		NewMeshProxyPatchDataSource,
		NewMeshProxyPatchListDataSource,
		NewMeshRateLimitDataSource,
		NewMeshRateLimitListDataSource,
		NewMeshRetryDataSource,
		NewMeshRetryListDataSource,
		NewMeshServiceDataSource,
		NewMeshServiceListDataSource,
		NewMeshTCPRouteDataSource,
		NewMeshTCPRouteListDataSource,
		NewMeshTimeoutDataSource,
		NewMeshTimeoutListDataSource,
		NewMeshTLSDataSource,
		NewMeshTLSListDataSource,
		NewMeshTraceDataSource,
		NewMeshTraceListDataSource,
		NewMeshTrafficPermissionDataSource,
		NewMeshTrafficPermissionListDataSource,
	}
}

func (p *KongMeshProvider) EphemeralResources(ctx context.Context) []func() ephemeral.EphemeralResource {
	return []func() ephemeral.EphemeralResource{}
}

func New(version string) func() provider.Provider {
	return func() provider.Provider {
		return &KongMeshProvider{
			version: version,
		}
	}
}
