// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/kong/terraform-provider-kong-mesh/internal/provider/types"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &DataplaneOverviewDataSource{}
var _ datasource.DataSourceWithConfigure = &DataplaneOverviewDataSource{}

func NewDataplaneOverviewDataSource() datasource.DataSource {
	return &DataplaneOverviewDataSource{}
}

// DataplaneOverviewDataSource is the data source implementation.
type DataplaneOverviewDataSource struct {
	client *sdk.KongMesh
}

// DataplaneOverviewDataSourceModel describes the data model.
type DataplaneOverviewDataSourceModel struct {
	Dataplane        *tfTypes.Dataplane        `tfsdk:"dataplane"`
	DataplaneInsight *tfTypes.DataplaneInsight `tfsdk:"dataplane_insight"`
	Labels           map[string]types.String   `tfsdk:"labels"`
	Mesh             types.String              `tfsdk:"mesh"`
	Name             types.String              `tfsdk:"name"`
	Type             types.String              `tfsdk:"type"`
}

// Metadata returns the data source type name.
func (r *DataplaneOverviewDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_dataplane_overview"
}

// Schema defines the schema for the data source.
func (r *DataplaneOverviewDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "DataplaneOverview DataSource",

		Attributes: map[string]schema.Attribute{
			"dataplane": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"metrics": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"conf": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"prometheus_metrics_backend_config": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"aggregate": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"address": schema.StringAttribute{
															Computed:    true,
															Description: `Address on which a service expose HTTP endpoint with Prometheus metrics.`,
														},
														"enabled": schema.BoolAttribute{
															Computed: true,
															MarkdownDescription: `If false then the application won't be scrapped. If nil, then it is treated` + "\n" +
																`as true and kuma-dp scrapes metrics from the service.`,
														},
														"name": schema.StringAttribute{
															Computed:    true,
															Description: `Name which identify given configuration.`,
														},
														"path": schema.StringAttribute{
															Computed:    true,
															Description: `Path on which a service expose HTTP endpoint with Prometheus metrics.`,
														},
														"port": schema.Int64Attribute{
															Computed:    true,
															Description: `Port on which a service expose HTTP endpoint with Prometheus metrics.`,
														},
													},
												},
												MarkdownDescription: `Map with the configuration of applications which metrics are going to be` + "\n" +
													`scrapped by kuma-dp.`,
											},
											"envoy": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"filter_regex": schema.StringAttribute{
														Computed: true,
														MarkdownDescription: `FilterRegex value that is going to be passed to Envoy for filtering` + "\n" +
															`Envoy metrics.`,
													},
													"used_only": schema.BoolAttribute{
														Computed: true,
														MarkdownDescription: `If true then return metrics that Envoy has updated (counters incremented` + "\n" +
															`at least once, gauges changed at least once, and histograms added to at` + "\n" +
															`least once). If nil, then it is treated as false.`,
													},
												},
												Description: `Configuration of Envoy's metrics.`,
											},
											"path": schema.StringAttribute{
												Computed: true,
												MarkdownDescription: `Path on which a dataplane should expose HTTP endpoint with Prometheus` + "\n" +
													`metrics.`,
											},
											"port": schema.Int64Attribute{
												Computed: true,
												MarkdownDescription: `Port on which a dataplane should expose HTTP endpoint with Prometheus` + "\n" +
													`metrics.`,
											},
											"skip_mtls": schema.BoolAttribute{
												Computed: true,
												MarkdownDescription: `If true then endpoints for scraping metrics won't require mTLS even if mTLS` + "\n" +
													`is enabled in Mesh. If nil, then it is treated as false.`,
											},
											"tags": schema.MapAttribute{
												Computed:    true,
												ElementType: types.StringType,
												MarkdownDescription: `Tags associated with an application this dataplane is deployed next to,` + "\n" +
													`e.g. service=web, version=1.0.` + "\n" +
													`` + "`" + `service` + "`" + ` tag is mandatory.`,
											},
											"tls": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"mode": schema.SingleNestedAttribute{
														Computed: true,
														Attributes: map[string]schema.Attribute{
															"integer": schema.Int64Attribute{
																Computed: true,
															},
															"str": schema.StringAttribute{
																Computed: true,
															},
														},
														MarkdownDescription: `mode defines how configured is the TLS for Prometheus.` + "\n" +
															`Supported values, delegated, disabled, activeMTLSBackend. Default to` + "\n" +
															`` + "`" + `activeMTLSBackend` + "`" + `.`,
													},
												},
												Description: `Configuration of TLS for prometheus listener.`,
											},
										},
									},
								},
							},
							"name": schema.StringAttribute{
								Computed:    true,
								Description: `Name of the backend, can be then used in Mesh.metrics.enabledBackend`,
							},
							"type": schema.StringAttribute{
								Computed:    true,
								Description: `Type of the backend (Kuma ships with 'prometheus')`,
							},
						},
						MarkdownDescription: `Configuration for metrics that should be collected and exposed by the` + "\n" +
							`data plane proxy.` + "\n" +
							`` + "\n" +
							`Settings defined here will override their respective defaults` + "\n" +
							`defined at a Mesh level.`,
					},
					"networking": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"address": schema.StringAttribute{
								Computed: true,
								MarkdownDescription: `IP on which the data plane proxy is accessible to the control plane and` + "\n" +
									`other data plane proxies in the same network. This can also be a` + "\n" +
									`hostname, in which case the control plane will periodically resolve it.`,
							},
							"admin": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"port": schema.Int64Attribute{
										Computed:    true,
										Description: `Port on which Envoy Admin API server will be listening`,
									},
								},
								MarkdownDescription: `Admin describes configuration related to Envoy Admin API.` + "\n" +
									`Due to security, all the Envoy Admin endpoints are exposed only on` + "\n" +
									`localhost. Additionally, Envoy will expose ` + "`" + `/ready` + "`" + ` endpoint on` + "\n" +
									`` + "`" + `networking.address` + "`" + ` for health checking systems to be able to check the` + "\n" +
									`state of Envoy. The rest of the endpoints exposed on ` + "`" + `networking.address` + "`" + `` + "\n" +
									`are always protected by mTLS and only meant to be consumed internally by` + "\n" +
									`the control plane.`,
							},
							"advertised_address": schema.StringAttribute{
								Computed: true,
								MarkdownDescription: `In some situations, a data plane proxy resides in a private network (e.g.` + "\n" +
									`Docker) and is not reachable via ` + "`" + `address` + "`" + ` to other data plane proxies.` + "\n" +
									`` + "`" + `advertisedAddress` + "`" + ` is configured with a routable address for such data` + "\n" +
									`plane proxy so that other proxies in the mesh can connect to it over` + "\n" +
									`` + "`" + `advertisedAddress` + "`" + ` and not via address.` + "\n" +
									`` + "\n" +
									`Envoy still binds to the ` + "`" + `address` + "`" + `, not ` + "`" + `advertisedAddress` + "`" + `.`,
							},
							"gateway": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"tags": schema.MapAttribute{
										Computed:    true,
										ElementType: types.StringType,
										MarkdownDescription: `Tags associated with a gateway of this data plane to, e.g.` + "\n" +
											`` + "`" + `kuma.io/service=gateway` + "`" + `, ` + "`" + `env=prod` + "`" + `. ` + "`" + `kuma.io/service` + "`" + ` tag is` + "\n" +
											`mandatory.`,
									},
									"type": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"integer": schema.Int64Attribute{
												Computed: true,
											},
											"str": schema.StringAttribute{
												Computed: true,
											},
										},
										MarkdownDescription: `Type of gateway this data plane proxy manages.` + "\n" +
											`There are two types: ` + "`" + `DELEGATED` + "`" + ` and ` + "`" + `BUILTIN` + "`" + `. Defaults to` + "\n" +
											`` + "`" + `DELEGATED` + "`" + `.` + "\n" +
											`` + "\n" +
											`A ` + "`" + `DELEGATED` + "`" + ` gateway is an independently deployed proxy (e.g., Kong,` + "\n" +
											`Contour, etc) that receives inbound traffic that is not proxied by` + "\n" +
											`Kuma, and it sends outbound traffic into the data plane proxy.` + "\n" +
											`` + "\n" +
											`The ` + "`" + `BUILTIN` + "`" + ` gateway type causes the data plane proxy itself to be` + "\n" +
											`configured as a gateway.` + "\n" +
											`` + "\n" +
											`See https://kuma.io/docs/latest/explore/gateway/ for more information.`,
									},
								},
								Description: `Gateway describes a configuration of the gateway of the data plane proxy.`,
							},
							"inbound": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"address": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `Address on which inbound listener will be exposed.` + "\n" +
												`Defaults to ` + "`" + `networking.address` + "`" + `.`,
										},
										"health": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"ready": schema.BoolAttribute{
													Computed: true,
													MarkdownDescription: `Ready indicates if the data plane proxy is ready to serve the` + "\n" +
														`traffic.`,
												},
											},
											MarkdownDescription: `Health describes the status of an inbound.` + "\n" +
												`If 'health' is nil we consider data plane proxy as healthy.` + "\n" +
												`Unhealthy data plane proxies are excluded from Endpoints Discovery` + "\n" +
												`Service (EDS). On Kubernetes, it is filled automatically by the control` + "\n" +
												`plane if Pod has readiness probe configured. On Universal, it can be` + "\n" +
												`set by the external health checking system, but the most common way is` + "\n" +
												`to use service probes.` + "\n" +
												`` + "\n" +
												`See https://kuma.io/docs/latest/documentation/health for more` + "\n" +
												`information.`,
										},
										"name": schema.StringAttribute{
											Computed:    true,
											Description: `Name adds another way of referencing this port, usable with MeshService`,
										},
										"port": schema.Int64Attribute{
											Computed: true,
											MarkdownDescription: `Port of the inbound interface that will forward requests to the` + "\n" +
												`service.` + "\n" +
												`` + "\n" +
												`When transparent proxying is used, it is a port on which the service is` + "\n" +
												`listening to. When transparent proxying is not used, Envoy will bind to` + "\n" +
												`this port.`,
										},
										"service_address": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `Address of the service that requests will be forwarded to.` + "\n" +
												`Defaults to 'inbound.address', since Kuma DP should be deployed next` + "\n" +
												`to the service.`,
										},
										"service_port": schema.Int64Attribute{
											Computed: true,
											MarkdownDescription: `Port of the service that requests will be forwarded to.` + "\n" +
												`Defaults to the same value as ` + "`" + `port` + "`" + `.`,
										},
										"service_probe": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"healthy_threshold": schema.Int64Attribute{
													Computed: true,
													MarkdownDescription: `Number of consecutive healthy checks before considering a host` + "\n" +
														`healthy.`,
												},
												"interval": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"nanos": schema.Int64Attribute{
															Computed: true,
														},
														"seconds": schema.Int64Attribute{
															Computed: true,
														},
													},
													Description: `Interval between consecutive health checks.`,
												},
												"tcp": schema.SingleNestedAttribute{
													Computed:    true,
													Description: `Tcp checker tries to establish tcp connection with destination`,
												},
												"timeout": schema.SingleNestedAttribute{
													Computed: true,
													Attributes: map[string]schema.Attribute{
														"nanos": schema.Int64Attribute{
															Computed: true,
														},
														"seconds": schema.Int64Attribute{
															Computed: true,
														},
													},
													Description: `Maximum time to wait for a health check response.`,
												},
												"unhealthy_threshold": schema.Int64Attribute{
													Computed: true,
													MarkdownDescription: `Number of consecutive unhealthy checks before considering a host` + "\n" +
														`unhealthy.`,
												},
											},
											MarkdownDescription: `ServiceProbe defines parameters for probing the service next to` + "\n" +
												`sidecar. When service probe is defined, Envoy will periodically health` + "\n" +
												`check the application next to it and report the status to the control` + "\n" +
												`plane. On Kubernetes, Kuma deployments rely on Kubernetes probes so` + "\n" +
												`this is not used.` + "\n" +
												`` + "\n" +
												`See https://kuma.io/docs/latest/documentation/health for more` + "\n" +
												`information.`,
										},
										"state": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"integer": schema.Int64Attribute{
													Computed: true,
												},
												"str": schema.StringAttribute{
													Computed: true,
												},
											},
											Description: `State describes the current state of the listener.`,
										},
										"tags": schema.MapAttribute{
											Computed:    true,
											ElementType: types.StringType,
											MarkdownDescription: `Tags associated with an application this data plane proxy is deployed` + "\n" +
												`next to, e.g. ` + "`" + `kuma.io/service=web` + "`" + `, ` + "`" + `version=1.0` + "`" + `. You can then` + "\n" +
												`reference these tags in policies like MeshTrafficPermission.` + "\n" +
												`` + "`" + `kuma.io/service` + "`" + ` tag is mandatory.`,
										},
									},
								},
								MarkdownDescription: `Inbound describes a list of inbound interfaces of the data plane proxy.` + "\n" +
									`` + "\n" +
									`Inbound describes a service implemented by the data plane proxy.` + "\n" +
									`All incoming traffic to a data plane proxy is going through inbound` + "\n" +
									`listeners. For every defined Inbound there is a corresponding Envoy` + "\n" +
									`Listener.`,
							},
							"outbound": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"address": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `IP on which the consumed service will be available to this data plane` + "\n" +
												`proxy. On Kubernetes, it's usually ClusterIP of a Service or PodIP of a` + "\n" +
												`Headless Service. Defaults to 127.0.0.1`,
										},
										"backend_ref": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"kind": schema.StringAttribute{
													Computed:    true,
													Description: `Kind is a type of the object to target. Allowed: MeshService`,
												},
												"labels": schema.MapAttribute{
													Computed:    true,
													ElementType: types.StringType,
													MarkdownDescription: `Labels to select a single object.` + "\n" +
														`If no object is selected then outbound is not created.` + "\n" +
														`If multiple objects are selected then the oldest one is used.`,
												},
												"name": schema.StringAttribute{
													Computed:    true,
													Description: `Name of the targeted object`,
												},
												"port": schema.Int64Attribute{
													Computed:    true,
													Description: `Port of the targeted object. Required when kind is MeshService.`,
												},
											},
											MarkdownDescription: `BackendRef is a way to target MeshService.` + "\n" +
												`Experimental. Do not use on production yet.`,
										},
										"port": schema.Int64Attribute{
											Computed: true,
											MarkdownDescription: `Port on which the consumed service will be available to this data plane` + "\n" +
												`proxy. When transparent proxying is not used, Envoy will bind to this` + "\n" +
												`port.`,
										},
										"tags": schema.MapAttribute{
											Computed:    true,
											ElementType: types.StringType,
											MarkdownDescription: `Tags of consumed data plane proxies.` + "\n" +
												`` + "`" + `kuma.io/service` + "`" + ` tag is required.` + "\n" +
												`These tags can then be referenced in ` + "`" + `destinations` + "`" + ` section of policies` + "\n" +
												`like TrafficRoute or in ` + "`" + `to` + "`" + ` section in policies like MeshAccessLog. It` + "\n" +
												`is recommended to only use ` + "`" + `kuma.io/service` + "`" + `. If you need to consume` + "\n" +
												`specific data plane proxy of a service (for example: ` + "`" + `version=v2` + "`" + `) the` + "\n" +
												`better practice is to use TrafficRoute.`,
										},
									},
								},
								MarkdownDescription: `Outbound describes a list of services consumed by the data plane proxy.` + "\n" +
									`For every defined Outbound, there is a corresponding Envoy Listener.`,
							},
							"transparent_proxying": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"direct_access_services": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
										MarkdownDescription: `List of services that will be accessed directly via IP:PORT` + "\n" +
											`Use ` + "`" + `*` + "`" + ` to indicate direct access to every service in the Mesh.` + "\n" +
											`Using ` + "`" + `*` + "`" + ` to directly access every service is a resource-intensive` + "\n" +
											`operation, use it only if needed.`,
									},
									"ip_family_mode": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"integer": schema.Int64Attribute{
												Computed: true,
											},
											"str": schema.StringAttribute{
												Computed: true,
											},
										},
										Description: `The IP family mode to enable for. Can be "IPv4" or "DualStack".`,
									},
									"reachable_backends": schema.SingleNestedAttribute{
										Computed: true,
										Attributes: map[string]schema.Attribute{
											"refs": schema.ListNestedAttribute{
												Computed: true,
												NestedObject: schema.NestedAttributeObject{
													Attributes: map[string]schema.Attribute{
														"kind": schema.StringAttribute{
															Computed: true,
															MarkdownDescription: `Type of the backend: MeshService or MeshExternalService` + "\n" +
																`` + "\n" +
																`	+required`,
														},
														"labels": schema.MapAttribute{
															Computed:    true,
															ElementType: types.StringType,
															MarkdownDescription: `Labels used to select backends` + "\n" +
																`` + "\n" +
																`	+optional`,
														},
														"name": schema.StringAttribute{
															Computed: true,
															MarkdownDescription: `Name of the backend.` + "\n" +
																`` + "\n" +
																`	+optional`,
														},
														"namespace": schema.StringAttribute{
															Computed: true,
															MarkdownDescription: `Namespace of the backend. Might be empty` + "\n" +
																`` + "\n" +
																`	+optional`,
														},
														"port": schema.Int64Attribute{
															Computed: true,
															MarkdownDescription: `Port of the backend.` + "\n" +
																`` + "\n" +
																`	+optional`,
														},
													},
												},
											},
										},
										MarkdownDescription: `Reachable backend via transparent proxy when running with` + "\n" +
											`MeshExternalService, MeshService and MeshMultiZoneService. Setting an` + "\n" +
											`explicit list of refs can dramatically improve the performance of the` + "\n" +
											`mesh. If not specified, all services in the mesh are reachable.`,
									},
									"reachable_services": schema.ListAttribute{
										Computed:    true,
										ElementType: types.StringType,
										MarkdownDescription: `List of reachable services (represented by the value of` + "\n" +
											`` + "`" + `kuma.io/service` + "`" + `) via transparent proxying. Setting an explicit list` + "\n" +
											`can dramatically improve the performance of the mesh. If not specified,` + "\n" +
											`all services in the mesh are reachable.`,
									},
									"redirect_port_inbound": schema.Int64Attribute{
										Computed:    true,
										Description: `Port on which all inbound traffic is being transparently redirected.`,
									},
									"redirect_port_outbound": schema.Int64Attribute{
										Computed:    true,
										Description: `Port on which all outbound traffic is being transparently redirected.`,
									},
								},
								MarkdownDescription: `TransparentProxying describes the configuration for transparent proxying.` + "\n" +
									`It is used by default on Kubernetes.`,
							},
						},
						MarkdownDescription: `Networking describes inbound and outbound interfaces of the data plane` + "\n" +
							`proxy.`,
					},
					"probes": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"endpoints": schema.ListNestedAttribute{
								Computed: true,
								NestedObject: schema.NestedAttributeObject{
									Attributes: map[string]schema.Attribute{
										"inbound_path": schema.StringAttribute{
											Computed: true,
											MarkdownDescription: `Inbound path is a path of the application from which we expose the` + "\n" +
												`endpoint. It is recommended to be as specific as possible.`,
										},
										"inbound_port": schema.Int64Attribute{
											Computed: true,
											MarkdownDescription: `Inbound port is a port of the application from which we expose the` + "\n" +
												`endpoint.`,
										},
										"path": schema.StringAttribute{
											Computed:    true,
											Description: `Path is a path on which we expose inbound path on the probes port.`,
										},
									},
								},
								Description: `List of endpoints to expose without mTLS.`,
							},
							"port": schema.Int64Attribute{
								Computed: true,
								MarkdownDescription: `Port on which the probe endpoints will be exposed. This cannot overlap` + "\n" +
									`with any other ports.`,
							},
						},
						MarkdownDescription: `Probes describe a list of endpoints that will be exposed without mTLS.` + "\n" +
							`This is useful to expose the health endpoints of the application so the` + "\n" +
							`orchestration system (e.g. Kubernetes) can still health check the` + "\n" +
							`application.` + "\n" +
							`` + "\n" +
							`See` + "\n" +
							`https://kuma.io/docs/latest/policies/service-health-probes/#virtual-probes` + "\n" +
							`for more information.` + "\n" +
							`Deprecated: this feature will be removed for Universal; on Kubernetes, it's` + "\n" +
							`not needed anymore.`,
					},
				},
			},
			"dataplane_insight": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"m_tls": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"certificate_expiration_time": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"nanos": schema.Int64Attribute{
										Computed: true,
									},
									"seconds": schema.Int64Attribute{
										Computed: true,
									},
								},
								MarkdownDescription: `Expiration time of the last certificate that was generated for a` + "\n" +
									`Dataplane.`,
							},
							"certificate_regenerations": schema.Int64Attribute{
								Computed:    true,
								Description: `Number of certificate regenerations for a Dataplane.`,
							},
							"issued_backend": schema.StringAttribute{
								Computed:    true,
								Description: `Backend that was used to generate current certificate`,
							},
							"last_certificate_regeneration": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"nanos": schema.Int64Attribute{
										Computed: true,
									},
									"seconds": schema.Int64Attribute{
										Computed: true,
									},
								},
								Description: `Time on which the last certificate was generated.`,
							},
							"supported_backends": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
								Description: `Supported backends (CA).`,
							},
						},
						Description: `Insights about mTLS for Dataplane.`,
					},
					"metadata": schema.SingleNestedAttribute{
						Computed: true,
					},
					"subscriptions": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"connect_time": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"nanos": schema.Int64Attribute{
											Computed: true,
										},
										"seconds": schema.Int64Attribute{
											Computed: true,
										},
									},
									Description: `Time when a given Dataplane connected to the Control Plane.`,
								},
								"control_plane_instance_id": schema.StringAttribute{
									Computed:    true,
									Description: `Control Plane instance that handled given subscription.`,
								},
								"disconnect_time": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"nanos": schema.Int64Attribute{
											Computed: true,
										},
										"seconds": schema.Int64Attribute{
											Computed: true,
										},
									},
									Description: `Time when a given Dataplane disconnected from the Control Plane.`,
								},
								"generation": schema.Int64Attribute{
									Computed: true,
									MarkdownDescription: `Generation is an integer number which is periodically increased by the` + "\n" +
										`status sink`,
								},
								"id": schema.StringAttribute{
									Computed:    true,
									Description: `Unique id per ADS subscription.`,
								},
								"status": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"cds": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"responses_acknowledged": schema.Int64Attribute{
													Computed:    true,
													Description: `Number of xDS responses ACKed by the Dataplane.`,
												},
												"responses_rejected": schema.Int64Attribute{
													Computed:    true,
													Description: `Number of xDS responses NACKed by the Dataplane.`,
												},
												"responses_sent": schema.Int64Attribute{
													Computed:    true,
													Description: `Number of xDS responses sent to the Dataplane.`,
												},
											},
											Description: `CDS defines all CDS stats.`,
										},
										"eds": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"responses_acknowledged": schema.Int64Attribute{
													Computed:    true,
													Description: `Number of xDS responses ACKed by the Dataplane.`,
												},
												"responses_rejected": schema.Int64Attribute{
													Computed:    true,
													Description: `Number of xDS responses NACKed by the Dataplane.`,
												},
												"responses_sent": schema.Int64Attribute{
													Computed:    true,
													Description: `Number of xDS responses sent to the Dataplane.`,
												},
											},
											Description: `EDS defines all EDS stats.`,
										},
										"last_update_time": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"nanos": schema.Int64Attribute{
													Computed: true,
												},
												"seconds": schema.Int64Attribute{
													Computed: true,
												},
											},
											Description: `Time when status of a given ADS subscription was most recently updated.`,
										},
										"lds": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"responses_acknowledged": schema.Int64Attribute{
													Computed:    true,
													Description: `Number of xDS responses ACKed by the Dataplane.`,
												},
												"responses_rejected": schema.Int64Attribute{
													Computed:    true,
													Description: `Number of xDS responses NACKed by the Dataplane.`,
												},
												"responses_sent": schema.Int64Attribute{
													Computed:    true,
													Description: `Number of xDS responses sent to the Dataplane.`,
												},
											},
											Description: `LDS defines all LDS stats.`,
										},
										"rds": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"responses_acknowledged": schema.Int64Attribute{
													Computed:    true,
													Description: `Number of xDS responses ACKed by the Dataplane.`,
												},
												"responses_rejected": schema.Int64Attribute{
													Computed:    true,
													Description: `Number of xDS responses NACKed by the Dataplane.`,
												},
												"responses_sent": schema.Int64Attribute{
													Computed:    true,
													Description: `Number of xDS responses sent to the Dataplane.`,
												},
											},
											Description: `RDS defines all RDS stats.`,
										},
										"total": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"responses_acknowledged": schema.Int64Attribute{
													Computed:    true,
													Description: `Number of xDS responses ACKed by the Dataplane.`,
												},
												"responses_rejected": schema.Int64Attribute{
													Computed:    true,
													Description: `Number of xDS responses NACKed by the Dataplane.`,
												},
												"responses_sent": schema.Int64Attribute{
													Computed:    true,
													Description: `Number of xDS responses sent to the Dataplane.`,
												},
											},
											Description: `Total defines an aggregate over individual xDS stats.`,
										},
									},
									Description: `Status of the ADS subscription.`,
								},
								"version": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"dependencies": schema.MapAttribute{
											Computed:    true,
											ElementType: types.StringType,
											Description: `Versions of other dependencies, i.e. CoreDNS`,
										},
										"envoy": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"build": schema.StringAttribute{
													Computed:    true,
													Description: `Full build tag of Envoy version`,
												},
												"kuma_dp_compatible": schema.BoolAttribute{
													Computed:    true,
													Description: `True iff Envoy version is compatible with Kuma DP version`,
												},
												"version": schema.StringAttribute{
													Computed:    true,
													Description: `Version number of Envoy`,
												},
											},
											Description: `Version of Envoy`,
										},
										"kuma_dp": schema.SingleNestedAttribute{
											Computed: true,
											Attributes: map[string]schema.Attribute{
												"build_date": schema.StringAttribute{
													Computed:    true,
													Description: `Build date of Kuma Dataplane version`,
												},
												"git_commit": schema.StringAttribute{
													Computed:    true,
													Description: `Git commit of Kuma Dataplane version`,
												},
												"git_tag": schema.StringAttribute{
													Computed:    true,
													Description: `Git tag of Kuma Dataplane version`,
												},
												"kuma_cp_compatible": schema.BoolAttribute{
													Computed:    true,
													Description: `True iff Kuma DP version is compatible with Kuma CP version`,
												},
												"version": schema.StringAttribute{
													Computed:    true,
													Description: `Version number of Kuma Dataplane`,
												},
											},
											Description: `Version of Kuma Dataplane`,
										},
									},
									Description: `Version of Envoy and Kuma dataplane`,
								},
							},
						},
						Description: `List of ADS subscriptions created by a given Dataplane.`,
					},
				},
			},
			"labels": schema.MapAttribute{
				Computed:    true,
				ElementType: types.StringType,
				Description: `the label of the resource`,
			},
			"mesh": schema.StringAttribute{
				Required:    true,
				Description: `The mesh of the DPP to get the diff for.`,
			},
			"name": schema.StringAttribute{
				Required:    true,
				Description: `The name of the DPP within the mesh to get the diff for.`,
			},
			"type": schema.StringAttribute{
				Computed:    true,
				Description: `the type of this resource`,
			},
		},
	}
}

func (r *DataplaneOverviewDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.KongMesh)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.KongMesh, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *DataplaneOverviewDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *DataplaneOverviewDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request, requestDiags := data.ToOperationsGetDataplaneOverviewRequest(ctx)
	resp.Diagnostics.Append(requestDiags...)

	if resp.Diagnostics.HasError() {
		return
	}
	res, err := r.client.GetDataplaneOverview(ctx, *request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.DataplaneOverviewWithMeta != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	resp.Diagnostics.Append(data.RefreshFromSharedDataplaneOverviewWithMeta(ctx, res.DataplaneOverviewWithMeta)...)

	if resp.Diagnostics.HasError() {
		return
	}

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
