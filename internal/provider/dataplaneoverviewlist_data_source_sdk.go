// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/kong/terraform-provider-kong-mesh/internal/provider/types"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/models/shared"
)

func (r *DataplaneOverviewListDataSourceModel) ToOperationsGetDataplaneOverviewListRequest(ctx context.Context) (*operations.GetDataplaneOverviewListRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var mesh string
	mesh = r.Mesh.ValueString()

	out := operations.GetDataplaneOverviewListRequest{
		Mesh: mesh,
	}

	return &out, diags
}

func (r *DataplaneOverviewListDataSourceModel) RefreshFromSharedGetDataplaneOverviewListResponse(ctx context.Context, resp *shared.GetDataplaneOverviewListResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Items = []tfTypes.DataplaneOverviewWithMeta{}
		if len(r.Items) > len(resp.Items) {
			r.Items = r.Items[:len(resp.Items)]
		}
		for itemsCount, itemsItem := range resp.Items {
			var items tfTypes.DataplaneOverviewWithMeta
			if itemsItem.Dataplane == nil {
				items.Dataplane = nil
			} else {
				items.Dataplane = &tfTypes.Dataplane{}
				if itemsItem.Dataplane.Metrics == nil {
					items.Dataplane.Metrics = nil
				} else {
					items.Dataplane.Metrics = &tfTypes.Metrics{}
					if itemsItem.Dataplane.Metrics.Conf != nil {
						items.Dataplane.Metrics.Conf = &tfTypes.DataplaneItemConf{}
						if itemsItem.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig != nil {
							items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig = &tfTypes.PrometheusMetricsBackendConfig{}
							items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Aggregate = []tfTypes.Aggregate{}
							for aggregateCount, aggregateItem := range itemsItem.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.Aggregate {
								var aggregate tfTypes.Aggregate
								aggregate.Address = types.StringPointerValue(aggregateItem.Address)
								aggregate.Enabled = types.BoolPointerValue(aggregateItem.Enabled)
								aggregate.Name = types.StringPointerValue(aggregateItem.Name)
								aggregate.Path = types.StringPointerValue(aggregateItem.Path)
								aggregate.Port = types.Int64PointerValue(aggregateItem.Port)
								if aggregateCount+1 > len(items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Aggregate) {
									items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Aggregate = append(items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Aggregate, aggregate)
								} else {
									items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Aggregate[aggregateCount].Address = aggregate.Address
									items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Aggregate[aggregateCount].Enabled = aggregate.Enabled
									items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Aggregate[aggregateCount].Name = aggregate.Name
									items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Aggregate[aggregateCount].Path = aggregate.Path
									items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Aggregate[aggregateCount].Port = aggregate.Port
								}
							}
							if itemsItem.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.Envoy == nil {
								items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Envoy = nil
							} else {
								items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Envoy = &tfTypes.ConfEnvoy{}
								items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Envoy.FilterRegex = types.StringPointerValue(itemsItem.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.Envoy.FilterRegex)
								items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Envoy.UsedOnly = types.BoolPointerValue(itemsItem.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.Envoy.UsedOnly)
							}
							items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Path = types.StringPointerValue(itemsItem.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.Path)
							items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Port = types.Int64PointerValue(itemsItem.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.Port)
							items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.SkipMTLS = types.BoolPointerValue(itemsItem.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.SkipMTLS)
							if len(itemsItem.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.Tags) > 0 {
								items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Tags = make(map[string]types.String, len(itemsItem.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.Tags))
								for key, value := range itemsItem.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.Tags {
									items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.Tags[key] = types.StringValue(value)
								}
							}
							if itemsItem.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.TLS == nil {
								items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.TLS = nil
							} else {
								items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.TLS = &tfTypes.ConfTLS{}
								if itemsItem.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.TLS.Mode != nil {
									items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.TLS.Mode = &tfTypes.ConfMode{}
									if itemsItem.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.TLS.Mode.Str != nil {
										items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Str = types.StringPointerValue(itemsItem.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.TLS.Mode.Str)
									}
									if itemsItem.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.TLS.Mode.Integer != nil {
										items.Dataplane.Metrics.Conf.PrometheusMetricsBackendConfig.TLS.Mode.Integer = types.Int64PointerValue(itemsItem.Dataplane.Metrics.Conf.ConfPrometheusMetricsBackendConfig.TLS.Mode.Integer)
									}
								}
							}
						}
					}
					items.Dataplane.Metrics.Name = types.StringPointerValue(itemsItem.Dataplane.Metrics.Name)
					items.Dataplane.Metrics.Type = types.StringPointerValue(itemsItem.Dataplane.Metrics.Type)
				}
				if itemsItem.Dataplane.Networking == nil {
					items.Dataplane.Networking = nil
				} else {
					items.Dataplane.Networking = &tfTypes.Networking{}
					items.Dataplane.Networking.Address = types.StringPointerValue(itemsItem.Dataplane.Networking.Address)
					if itemsItem.Dataplane.Networking.Admin == nil {
						items.Dataplane.Networking.Admin = nil
					} else {
						items.Dataplane.Networking.Admin = &tfTypes.Admin{}
						items.Dataplane.Networking.Admin.Port = types.Int64PointerValue(itemsItem.Dataplane.Networking.Admin.Port)
					}
					items.Dataplane.Networking.AdvertisedAddress = types.StringPointerValue(itemsItem.Dataplane.Networking.AdvertisedAddress)
					if itemsItem.Dataplane.Networking.Gateway == nil {
						items.Dataplane.Networking.Gateway = nil
					} else {
						items.Dataplane.Networking.Gateway = &tfTypes.Gateway{}
						if len(itemsItem.Dataplane.Networking.Gateway.Tags) > 0 {
							items.Dataplane.Networking.Gateway.Tags = make(map[string]types.String, len(itemsItem.Dataplane.Networking.Gateway.Tags))
							for key1, value1 := range itemsItem.Dataplane.Networking.Gateway.Tags {
								items.Dataplane.Networking.Gateway.Tags[key1] = types.StringValue(value1)
							}
						}
						if itemsItem.Dataplane.Networking.Gateway.Type != nil {
							items.Dataplane.Networking.Gateway.Type = &tfTypes.ConfMode{}
							if itemsItem.Dataplane.Networking.Gateway.Type.Str != nil {
								items.Dataplane.Networking.Gateway.Type.Str = types.StringPointerValue(itemsItem.Dataplane.Networking.Gateway.Type.Str)
							}
							if itemsItem.Dataplane.Networking.Gateway.Type.Integer != nil {
								items.Dataplane.Networking.Gateway.Type.Integer = types.Int64PointerValue(itemsItem.Dataplane.Networking.Gateway.Type.Integer)
							}
						}
					}
					items.Dataplane.Networking.Inbound = []tfTypes.DataplaneItemInbound{}
					for inboundCount, inboundItem := range itemsItem.Dataplane.Networking.Inbound {
						var inbound tfTypes.DataplaneItemInbound
						inbound.Address = types.StringPointerValue(inboundItem.Address)
						if inboundItem.Health == nil {
							inbound.Health = nil
						} else {
							inbound.Health = &tfTypes.Health{}
							inbound.Health.Ready = types.BoolPointerValue(inboundItem.Health.Ready)
						}
						inbound.Name = types.StringPointerValue(inboundItem.Name)
						inbound.Port = types.Int64PointerValue(inboundItem.Port)
						inbound.ServiceAddress = types.StringPointerValue(inboundItem.ServiceAddress)
						inbound.ServicePort = types.Int64PointerValue(inboundItem.ServicePort)
						if inboundItem.ServiceProbe == nil {
							inbound.ServiceProbe = nil
						} else {
							inbound.ServiceProbe = &tfTypes.ServiceProbe{}
							inbound.ServiceProbe.HealthyThreshold = types.Int64PointerValue(inboundItem.ServiceProbe.HealthyThreshold)
							if inboundItem.ServiceProbe.Interval == nil {
								inbound.ServiceProbe.Interval = nil
							} else {
								inbound.ServiceProbe.Interval = &tfTypes.Interval{}
								inbound.ServiceProbe.Interval.Nanos = types.Int64PointerValue(inboundItem.ServiceProbe.Interval.Nanos)
								inbound.ServiceProbe.Interval.Seconds = types.Int64PointerValue(inboundItem.ServiceProbe.Interval.Seconds)
							}
							if inboundItem.ServiceProbe.TCP == nil {
								inbound.ServiceProbe.TCP = nil
							} else {
								inbound.ServiceProbe.TCP = &tfTypes.DataplaneItemTCP{}
							}
							if inboundItem.ServiceProbe.Timeout == nil {
								inbound.ServiceProbe.Timeout = nil
							} else {
								inbound.ServiceProbe.Timeout = &tfTypes.Interval{}
								inbound.ServiceProbe.Timeout.Nanos = types.Int64PointerValue(inboundItem.ServiceProbe.Timeout.Nanos)
								inbound.ServiceProbe.Timeout.Seconds = types.Int64PointerValue(inboundItem.ServiceProbe.Timeout.Seconds)
							}
							inbound.ServiceProbe.UnhealthyThreshold = types.Int64PointerValue(inboundItem.ServiceProbe.UnhealthyThreshold)
						}
						if inboundItem.State != nil {
							inbound.State = &tfTypes.ConfMode{}
							if inboundItem.State.Str != nil {
								inbound.State.Str = types.StringPointerValue(inboundItem.State.Str)
							}
							if inboundItem.State.Integer != nil {
								inbound.State.Integer = types.Int64PointerValue(inboundItem.State.Integer)
							}
						}
						if len(inboundItem.Tags) > 0 {
							inbound.Tags = make(map[string]types.String, len(inboundItem.Tags))
							for key2, value2 := range inboundItem.Tags {
								inbound.Tags[key2] = types.StringValue(value2)
							}
						}
						if inboundCount+1 > len(items.Dataplane.Networking.Inbound) {
							items.Dataplane.Networking.Inbound = append(items.Dataplane.Networking.Inbound, inbound)
						} else {
							items.Dataplane.Networking.Inbound[inboundCount].Address = inbound.Address
							items.Dataplane.Networking.Inbound[inboundCount].Health = inbound.Health
							items.Dataplane.Networking.Inbound[inboundCount].Name = inbound.Name
							items.Dataplane.Networking.Inbound[inboundCount].Port = inbound.Port
							items.Dataplane.Networking.Inbound[inboundCount].ServiceAddress = inbound.ServiceAddress
							items.Dataplane.Networking.Inbound[inboundCount].ServicePort = inbound.ServicePort
							items.Dataplane.Networking.Inbound[inboundCount].ServiceProbe = inbound.ServiceProbe
							items.Dataplane.Networking.Inbound[inboundCount].State = inbound.State
							items.Dataplane.Networking.Inbound[inboundCount].Tags = inbound.Tags
						}
					}
					items.Dataplane.Networking.Outbound = []tfTypes.Outbound{}
					for outboundCount, outboundItem := range itemsItem.Dataplane.Networking.Outbound {
						var outbound tfTypes.Outbound
						outbound.Address = types.StringPointerValue(outboundItem.Address)
						if outboundItem.BackendRef == nil {
							outbound.BackendRef = nil
						} else {
							outbound.BackendRef = &tfTypes.BackendRef{}
							outbound.BackendRef.Kind = types.StringPointerValue(outboundItem.BackendRef.Kind)
							if len(outboundItem.BackendRef.Labels) > 0 {
								outbound.BackendRef.Labels = make(map[string]types.String, len(outboundItem.BackendRef.Labels))
								for key3, value3 := range outboundItem.BackendRef.Labels {
									outbound.BackendRef.Labels[key3] = types.StringValue(value3)
								}
							}
							outbound.BackendRef.Name = types.StringPointerValue(outboundItem.BackendRef.Name)
							outbound.BackendRef.Port = types.Int64PointerValue(outboundItem.BackendRef.Port)
						}
						outbound.Port = types.Int64PointerValue(outboundItem.Port)
						if len(outboundItem.Tags) > 0 {
							outbound.Tags = make(map[string]types.String, len(outboundItem.Tags))
							for key4, value4 := range outboundItem.Tags {
								outbound.Tags[key4] = types.StringValue(value4)
							}
						}
						if outboundCount+1 > len(items.Dataplane.Networking.Outbound) {
							items.Dataplane.Networking.Outbound = append(items.Dataplane.Networking.Outbound, outbound)
						} else {
							items.Dataplane.Networking.Outbound[outboundCount].Address = outbound.Address
							items.Dataplane.Networking.Outbound[outboundCount].BackendRef = outbound.BackendRef
							items.Dataplane.Networking.Outbound[outboundCount].Port = outbound.Port
							items.Dataplane.Networking.Outbound[outboundCount].Tags = outbound.Tags
						}
					}
					if itemsItem.Dataplane.Networking.TransparentProxying == nil {
						items.Dataplane.Networking.TransparentProxying = nil
					} else {
						items.Dataplane.Networking.TransparentProxying = &tfTypes.TransparentProxying{}
						items.Dataplane.Networking.TransparentProxying.DirectAccessServices = make([]types.String, 0, len(itemsItem.Dataplane.Networking.TransparentProxying.DirectAccessServices))
						for _, v := range itemsItem.Dataplane.Networking.TransparentProxying.DirectAccessServices {
							items.Dataplane.Networking.TransparentProxying.DirectAccessServices = append(items.Dataplane.Networking.TransparentProxying.DirectAccessServices, types.StringValue(v))
						}
						if itemsItem.Dataplane.Networking.TransparentProxying.IPFamilyMode != nil {
							items.Dataplane.Networking.TransparentProxying.IPFamilyMode = &tfTypes.ConfMode{}
							if itemsItem.Dataplane.Networking.TransparentProxying.IPFamilyMode.Str != nil {
								items.Dataplane.Networking.TransparentProxying.IPFamilyMode.Str = types.StringPointerValue(itemsItem.Dataplane.Networking.TransparentProxying.IPFamilyMode.Str)
							}
							if itemsItem.Dataplane.Networking.TransparentProxying.IPFamilyMode.Integer != nil {
								items.Dataplane.Networking.TransparentProxying.IPFamilyMode.Integer = types.Int64PointerValue(itemsItem.Dataplane.Networking.TransparentProxying.IPFamilyMode.Integer)
							}
						}
						if itemsItem.Dataplane.Networking.TransparentProxying.ReachableBackends == nil {
							items.Dataplane.Networking.TransparentProxying.ReachableBackends = nil
						} else {
							items.Dataplane.Networking.TransparentProxying.ReachableBackends = &tfTypes.ReachableBackends{}
							items.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs = []tfTypes.Refs{}
							for refsCount, refsItem := range itemsItem.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs {
								var refs tfTypes.Refs
								refs.Kind = types.StringPointerValue(refsItem.Kind)
								if len(refsItem.Labels) > 0 {
									refs.Labels = make(map[string]types.String, len(refsItem.Labels))
									for key5, value5 := range refsItem.Labels {
										refs.Labels[key5] = types.StringValue(value5)
									}
								}
								refs.Name = types.StringPointerValue(refsItem.Name)
								refs.Namespace = types.StringPointerValue(refsItem.Namespace)
								refs.Port = types.Int64PointerValue(refsItem.Port)
								if refsCount+1 > len(items.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs) {
									items.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs = append(items.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs, refs)
								} else {
									items.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs[refsCount].Kind = refs.Kind
									items.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs[refsCount].Labels = refs.Labels
									items.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs[refsCount].Name = refs.Name
									items.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs[refsCount].Namespace = refs.Namespace
									items.Dataplane.Networking.TransparentProxying.ReachableBackends.Refs[refsCount].Port = refs.Port
								}
							}
						}
						items.Dataplane.Networking.TransparentProxying.ReachableServices = make([]types.String, 0, len(itemsItem.Dataplane.Networking.TransparentProxying.ReachableServices))
						for _, v := range itemsItem.Dataplane.Networking.TransparentProxying.ReachableServices {
							items.Dataplane.Networking.TransparentProxying.ReachableServices = append(items.Dataplane.Networking.TransparentProxying.ReachableServices, types.StringValue(v))
						}
						items.Dataplane.Networking.TransparentProxying.RedirectPortInbound = types.Int64PointerValue(itemsItem.Dataplane.Networking.TransparentProxying.RedirectPortInbound)
						items.Dataplane.Networking.TransparentProxying.RedirectPortOutbound = types.Int64PointerValue(itemsItem.Dataplane.Networking.TransparentProxying.RedirectPortOutbound)
					}
				}
				if itemsItem.Dataplane.Probes == nil {
					items.Dataplane.Probes = nil
				} else {
					items.Dataplane.Probes = &tfTypes.Probes{}
					items.Dataplane.Probes.Endpoints = []tfTypes.Endpoints{}
					for endpointsCount, endpointsItem := range itemsItem.Dataplane.Probes.Endpoints {
						var endpoints tfTypes.Endpoints
						endpoints.InboundPath = types.StringPointerValue(endpointsItem.InboundPath)
						endpoints.InboundPort = types.Int64PointerValue(endpointsItem.InboundPort)
						endpoints.Path = types.StringPointerValue(endpointsItem.Path)
						if endpointsCount+1 > len(items.Dataplane.Probes.Endpoints) {
							items.Dataplane.Probes.Endpoints = append(items.Dataplane.Probes.Endpoints, endpoints)
						} else {
							items.Dataplane.Probes.Endpoints[endpointsCount].InboundPath = endpoints.InboundPath
							items.Dataplane.Probes.Endpoints[endpointsCount].InboundPort = endpoints.InboundPort
							items.Dataplane.Probes.Endpoints[endpointsCount].Path = endpoints.Path
						}
					}
					items.Dataplane.Probes.Port = types.Int64PointerValue(itemsItem.Dataplane.Probes.Port)
				}
			}
			if itemsItem.DataplaneInsight == nil {
				items.DataplaneInsight = nil
			} else {
				items.DataplaneInsight = &tfTypes.DataplaneInsight{}
				if itemsItem.DataplaneInsight.Metadata == nil {
					items.DataplaneInsight.Metadata = nil
				} else {
					items.DataplaneInsight.Metadata = &tfTypes.DataplaneItemTCP{}
				}
				if itemsItem.DataplaneInsight.MTLS == nil {
					items.DataplaneInsight.MTLS = nil
				} else {
					items.DataplaneInsight.MTLS = &tfTypes.DataplaneOverviewWithMetaMTLS{}
					if itemsItem.DataplaneInsight.MTLS.CertificateExpirationTime == nil {
						items.DataplaneInsight.MTLS.CertificateExpirationTime = nil
					} else {
						items.DataplaneInsight.MTLS.CertificateExpirationTime = &tfTypes.Interval{}
						items.DataplaneInsight.MTLS.CertificateExpirationTime.Nanos = types.Int64PointerValue(itemsItem.DataplaneInsight.MTLS.CertificateExpirationTime.Nanos)
						items.DataplaneInsight.MTLS.CertificateExpirationTime.Seconds = types.Int64PointerValue(itemsItem.DataplaneInsight.MTLS.CertificateExpirationTime.Seconds)
					}
					items.DataplaneInsight.MTLS.CertificateRegenerations = types.Int64PointerValue(itemsItem.DataplaneInsight.MTLS.CertificateRegenerations)
					items.DataplaneInsight.MTLS.IssuedBackend = types.StringPointerValue(itemsItem.DataplaneInsight.MTLS.IssuedBackend)
					if itemsItem.DataplaneInsight.MTLS.LastCertificateRegeneration == nil {
						items.DataplaneInsight.MTLS.LastCertificateRegeneration = nil
					} else {
						items.DataplaneInsight.MTLS.LastCertificateRegeneration = &tfTypes.Interval{}
						items.DataplaneInsight.MTLS.LastCertificateRegeneration.Nanos = types.Int64PointerValue(itemsItem.DataplaneInsight.MTLS.LastCertificateRegeneration.Nanos)
						items.DataplaneInsight.MTLS.LastCertificateRegeneration.Seconds = types.Int64PointerValue(itemsItem.DataplaneInsight.MTLS.LastCertificateRegeneration.Seconds)
					}
					items.DataplaneInsight.MTLS.SupportedBackends = make([]types.String, 0, len(itemsItem.DataplaneInsight.MTLS.SupportedBackends))
					for _, v := range itemsItem.DataplaneInsight.MTLS.SupportedBackends {
						items.DataplaneInsight.MTLS.SupportedBackends = append(items.DataplaneInsight.MTLS.SupportedBackends, types.StringValue(v))
					}
				}
				items.DataplaneInsight.Subscriptions = []tfTypes.Subscriptions{}
				for subscriptionsCount, subscriptionsItem := range itemsItem.DataplaneInsight.Subscriptions {
					var subscriptions tfTypes.Subscriptions
					if subscriptionsItem.ConnectTime == nil {
						subscriptions.ConnectTime = nil
					} else {
						subscriptions.ConnectTime = &tfTypes.Interval{}
						subscriptions.ConnectTime.Nanos = types.Int64PointerValue(subscriptionsItem.ConnectTime.Nanos)
						subscriptions.ConnectTime.Seconds = types.Int64PointerValue(subscriptionsItem.ConnectTime.Seconds)
					}
					subscriptions.ControlPlaneInstanceID = types.StringPointerValue(subscriptionsItem.ControlPlaneInstanceID)
					if subscriptionsItem.DisconnectTime == nil {
						subscriptions.DisconnectTime = nil
					} else {
						subscriptions.DisconnectTime = &tfTypes.Interval{}
						subscriptions.DisconnectTime.Nanos = types.Int64PointerValue(subscriptionsItem.DisconnectTime.Nanos)
						subscriptions.DisconnectTime.Seconds = types.Int64PointerValue(subscriptionsItem.DisconnectTime.Seconds)
					}
					subscriptions.Generation = types.Int64PointerValue(subscriptionsItem.Generation)
					subscriptions.ID = types.StringPointerValue(subscriptionsItem.ID)
					if subscriptionsItem.Status == nil {
						subscriptions.Status = nil
					} else {
						subscriptions.Status = &tfTypes.DataplaneOverviewWithMetaStatus{}
						if subscriptionsItem.Status.Cds == nil {
							subscriptions.Status.Cds = nil
						} else {
							subscriptions.Status.Cds = &tfTypes.Cds{}
							subscriptions.Status.Cds.ResponsesAcknowledged = types.Int64PointerValue(subscriptionsItem.Status.Cds.ResponsesAcknowledged)
							subscriptions.Status.Cds.ResponsesRejected = types.Int64PointerValue(subscriptionsItem.Status.Cds.ResponsesRejected)
							subscriptions.Status.Cds.ResponsesSent = types.Int64PointerValue(subscriptionsItem.Status.Cds.ResponsesSent)
						}
						if subscriptionsItem.Status.Eds == nil {
							subscriptions.Status.Eds = nil
						} else {
							subscriptions.Status.Eds = &tfTypes.Cds{}
							subscriptions.Status.Eds.ResponsesAcknowledged = types.Int64PointerValue(subscriptionsItem.Status.Eds.ResponsesAcknowledged)
							subscriptions.Status.Eds.ResponsesRejected = types.Int64PointerValue(subscriptionsItem.Status.Eds.ResponsesRejected)
							subscriptions.Status.Eds.ResponsesSent = types.Int64PointerValue(subscriptionsItem.Status.Eds.ResponsesSent)
						}
						if subscriptionsItem.Status.LastUpdateTime == nil {
							subscriptions.Status.LastUpdateTime = nil
						} else {
							subscriptions.Status.LastUpdateTime = &tfTypes.Interval{}
							subscriptions.Status.LastUpdateTime.Nanos = types.Int64PointerValue(subscriptionsItem.Status.LastUpdateTime.Nanos)
							subscriptions.Status.LastUpdateTime.Seconds = types.Int64PointerValue(subscriptionsItem.Status.LastUpdateTime.Seconds)
						}
						if subscriptionsItem.Status.Lds == nil {
							subscriptions.Status.Lds = nil
						} else {
							subscriptions.Status.Lds = &tfTypes.Cds{}
							subscriptions.Status.Lds.ResponsesAcknowledged = types.Int64PointerValue(subscriptionsItem.Status.Lds.ResponsesAcknowledged)
							subscriptions.Status.Lds.ResponsesRejected = types.Int64PointerValue(subscriptionsItem.Status.Lds.ResponsesRejected)
							subscriptions.Status.Lds.ResponsesSent = types.Int64PointerValue(subscriptionsItem.Status.Lds.ResponsesSent)
						}
						if subscriptionsItem.Status.Rds == nil {
							subscriptions.Status.Rds = nil
						} else {
							subscriptions.Status.Rds = &tfTypes.Cds{}
							subscriptions.Status.Rds.ResponsesAcknowledged = types.Int64PointerValue(subscriptionsItem.Status.Rds.ResponsesAcknowledged)
							subscriptions.Status.Rds.ResponsesRejected = types.Int64PointerValue(subscriptionsItem.Status.Rds.ResponsesRejected)
							subscriptions.Status.Rds.ResponsesSent = types.Int64PointerValue(subscriptionsItem.Status.Rds.ResponsesSent)
						}
						if subscriptionsItem.Status.Total == nil {
							subscriptions.Status.Total = nil
						} else {
							subscriptions.Status.Total = &tfTypes.Cds{}
							subscriptions.Status.Total.ResponsesAcknowledged = types.Int64PointerValue(subscriptionsItem.Status.Total.ResponsesAcknowledged)
							subscriptions.Status.Total.ResponsesRejected = types.Int64PointerValue(subscriptionsItem.Status.Total.ResponsesRejected)
							subscriptions.Status.Total.ResponsesSent = types.Int64PointerValue(subscriptionsItem.Status.Total.ResponsesSent)
						}
					}
					if subscriptionsItem.Version == nil {
						subscriptions.Version = nil
					} else {
						subscriptions.Version = &tfTypes.Version{}
						if len(subscriptionsItem.Version.Dependencies) > 0 {
							subscriptions.Version.Dependencies = make(map[string]types.String, len(subscriptionsItem.Version.Dependencies))
							for key6, value6 := range subscriptionsItem.Version.Dependencies {
								subscriptions.Version.Dependencies[key6] = types.StringValue(value6)
							}
						}
						if subscriptionsItem.Version.Envoy == nil {
							subscriptions.Version.Envoy = nil
						} else {
							subscriptions.Version.Envoy = &tfTypes.Envoy{}
							subscriptions.Version.Envoy.Build = types.StringPointerValue(subscriptionsItem.Version.Envoy.Build)
							subscriptions.Version.Envoy.KumaDpCompatible = types.BoolPointerValue(subscriptionsItem.Version.Envoy.KumaDpCompatible)
							subscriptions.Version.Envoy.Version = types.StringPointerValue(subscriptionsItem.Version.Envoy.Version)
						}
						if subscriptionsItem.Version.KumaDp == nil {
							subscriptions.Version.KumaDp = nil
						} else {
							subscriptions.Version.KumaDp = &tfTypes.KumaDp{}
							subscriptions.Version.KumaDp.BuildDate = types.StringPointerValue(subscriptionsItem.Version.KumaDp.BuildDate)
							subscriptions.Version.KumaDp.GitCommit = types.StringPointerValue(subscriptionsItem.Version.KumaDp.GitCommit)
							subscriptions.Version.KumaDp.GitTag = types.StringPointerValue(subscriptionsItem.Version.KumaDp.GitTag)
							subscriptions.Version.KumaDp.KumaCpCompatible = types.BoolPointerValue(subscriptionsItem.Version.KumaDp.KumaCpCompatible)
							subscriptions.Version.KumaDp.Version = types.StringPointerValue(subscriptionsItem.Version.KumaDp.Version)
						}
					}
					if subscriptionsCount+1 > len(items.DataplaneInsight.Subscriptions) {
						items.DataplaneInsight.Subscriptions = append(items.DataplaneInsight.Subscriptions, subscriptions)
					} else {
						items.DataplaneInsight.Subscriptions[subscriptionsCount].ConnectTime = subscriptions.ConnectTime
						items.DataplaneInsight.Subscriptions[subscriptionsCount].ControlPlaneInstanceID = subscriptions.ControlPlaneInstanceID
						items.DataplaneInsight.Subscriptions[subscriptionsCount].DisconnectTime = subscriptions.DisconnectTime
						items.DataplaneInsight.Subscriptions[subscriptionsCount].Generation = subscriptions.Generation
						items.DataplaneInsight.Subscriptions[subscriptionsCount].ID = subscriptions.ID
						items.DataplaneInsight.Subscriptions[subscriptionsCount].Status = subscriptions.Status
						items.DataplaneInsight.Subscriptions[subscriptionsCount].Version = subscriptions.Version
					}
				}
			}
			if len(itemsItem.Labels) > 0 {
				items.Labels = make(map[string]types.String, len(itemsItem.Labels))
				for key7, value7 := range itemsItem.Labels {
					items.Labels[key7] = types.StringValue(value7)
				}
			}
			items.Mesh = types.StringValue(itemsItem.Mesh)
			items.Name = types.StringValue(itemsItem.Name)
			items.Type = types.StringValue(itemsItem.Type)
			if itemsCount+1 > len(r.Items) {
				r.Items = append(r.Items, items)
			} else {
				r.Items[itemsCount].Dataplane = items.Dataplane
				r.Items[itemsCount].DataplaneInsight = items.DataplaneInsight
				r.Items[itemsCount].Labels = items.Labels
				r.Items[itemsCount].Mesh = items.Mesh
				r.Items[itemsCount].Name = items.Name
				r.Items[itemsCount].Type = items.Type
			}
		}
		r.Next = types.StringPointerValue(resp.Next)
		r.Total = types.Int64PointerValue(resp.Total)
	}

	return diags
}
