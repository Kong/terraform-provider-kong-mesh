// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/models/operations"
	"github.com/kong/terraform-provider-kong-mesh/internal/sdk/models/shared"
)

func (r *SecretResourceModel) ToSharedSecretItem(ctx context.Context) (*shared.SecretItem, diag.Diagnostics) {
	var diags diag.Diagnostics

	data := new(string)
	if !r.Data.IsUnknown() && !r.Data.IsNull() {
		*data = r.Data.ValueString()
	} else {
		data = nil
	}
	labels := make(map[string]string)
	for labelsKey, labelsValue := range r.Labels {
		var labelsInst string
		labelsInst = labelsValue.ValueString()

		labels[labelsKey] = labelsInst
	}
	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	var typeVar string
	typeVar = r.Type.ValueString()

	out := shared.SecretItem{
		Data:   data,
		Labels: labels,
		Mesh:   mesh,
		Name:   name,
		Type:   typeVar,
	}

	return &out, diags
}

func (r *SecretResourceModel) ToOperationsPutSecretRequest(ctx context.Context) (*operations.PutSecretRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	secretItem, secretItemDiags := r.ToSharedSecretItem(ctx)
	diags.Append(secretItemDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.PutSecretRequest{
		Mesh:       mesh,
		Name:       name,
		SecretItem: *secretItem,
	}

	return &out, diags
}

func (r *SecretResourceModel) ToOperationsGetSecretRequest(ctx context.Context) (*operations.GetSecretRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.GetSecretRequest{
		Mesh: mesh,
		Name: name,
	}

	return &out, diags
}

func (r *SecretResourceModel) ToOperationsDeleteSecretRequest(ctx context.Context) (*operations.DeleteSecretRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var mesh string
	mesh = r.Mesh.ValueString()

	var name string
	name = r.Name.ValueString()

	out := operations.DeleteSecretRequest{
		Mesh: mesh,
		Name: name,
	}

	return &out, diags
}

func (r *SecretResourceModel) RefreshFromSharedSecretCreateOrUpdateSuccessResponse(ctx context.Context, resp *shared.SecretCreateOrUpdateSuccessResponse) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Warnings = make([]types.String, 0, len(resp.Warnings))
		for _, v := range resp.Warnings {
			r.Warnings = append(r.Warnings, types.StringValue(v))
		}
	}

	return diags
}

func (r *SecretResourceModel) RefreshFromSharedSecretItem(ctx context.Context, resp *shared.SecretItem) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.Data = types.StringPointerValue(resp.Data)
		if len(resp.Labels) > 0 {
			r.Labels = make(map[string]types.String, len(resp.Labels))
			for key, value := range resp.Labels {
				r.Labels[key] = types.StringValue(value)
			}
		}
		r.Mesh = types.StringValue(resp.Mesh)
		r.Name = types.StringValue(resp.Name)
		r.Type = types.StringValue(resp.Type)
	}

	return diags
}
